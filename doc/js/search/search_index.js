var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/NgcCompliance.html",[0,0.183,1,1.697]],["body/interfaces/NgcCompliance.html",[0,0.34,1,2.55,2,0.379,3,0.44,4,0.321,5,2.55,6,2.225,7,0.44,8,2.766,9,2.865,10,3.786,11,3.562,12,2.94,13,2.94,14,3.562,15,3.562,16,0.321,17,1.264,18,3.562,19,3.562,20,3.562,21,2.289,22,0.321,23,2.821,24,1.34,25,0.927,26,3.562,27,0.483,28,0.038,29,1.777,30,0.801,31,1.98,32,1.98,33,1.98,34,1.98,35,1.777,36,1.777,37,1.98,38,0.981,39,1.777,40,2.55,41,2.55,42,1.868,43,1.777,44,2.225,45,1.98,46,1.98,47,1.98,48,1.98,49,1.777,50,1.98,51,1.98,52,1.451,53,0.504,54,0.888,55,1.194,56,1.315,57,1.031,58,1.143,59,1.143,60,0.028,61,0.028]],["title/classes/NgcContentOptions.html",[16,0.275,62,2.168]],["body/classes/NgcContentOptions.html",[2,0.297,3,0.344,4,0.251,7,0.344,16,0.351,17,1.271,22,0.251,24,1.363,25,1.15,27,0.251,28,0.038,30,1.363,38,1.336,39,1.39,49,1.39,53,0.796,54,0.694,57,1.188,58,1.209,59,1.209,60,0.024,61,0.024,62,2.763,63,5.753,64,1.39,65,2.299,66,1.39,67,0.786,68,1.975,69,3.029,70,4.849,71,3.029,72,3.754,73,4.003,74,0.914,75,2.562,76,2.84,77,2.299,78,3.889,79,2.785,80,3.21,81,2.785,82,2.299,83,4.362,84,2.299,85,3.889,86,2.785,87,3.21,88,3.21,89,2.785,90,3.21,91,3.21,92,3.21,93,1.979,94,2.785,95,3.889,96,2.299]],["title/interfaces/NgcCookieConsent.html",[0,0.183,97,1.697]],["body/interfaces/NgcCookieConsent.html",[0,0.292,2,0.177,3,0.406,4,0.15,7,0.205,16,0.15,17,0.414,22,0.15,24,0.739,25,0.533,27,0.338,28,0.039,30,0.373,38,0.457,42,0.676,52,1.338,53,0.746,54,1.18,55,1.767,56,1.802,57,0.593,58,0.658,59,0.658,60,0.016,61,0.016,66,2.039,67,0.664,68,0.676,74,0.528,97,2.082,98,1.037,99,1.479,100,2.053,101,2.171,102,2.338,103,1.479,104,2.718,105,2.639,106,1.66,107,2.546,108,1.648,109,2.363,110,2.082,111,1.929,112,2.713,113,3.408,114,1.66,115,1.037,116,0.923,117,2.276,118,1.037,119,1.66,120,3.004,121,1.929,122,1.338,123,0.676,124,2.931,125,3.034,126,1.037,127,1.037,128,0.747,129,1.037,130,1.037,131,0.747,132,1.037,133,1.037,134,0.747,135,1.037,136,1.188,137,1.037,138,1.037,139,1.037,140,1.648,141,1.827,142,1.648,143,1.648,144,1.648,145,1.648,146,1.648,147,1.648,148,1.648,149,1.648,150,0.923,151,1.037,152,1.468,153,0.676,154,0.828,155,1.037,156,0.747,157,1.037,158,1.037,159,1.037,160,0.923,161,1.037,162,1.037,163,1.317,164,2.838,165,2.552,166,1.037,167,1.037,168,1.037,169,1.037,170,1.037,171,1.037,172,1.037,173,1.037,174,2.419,175,2.718,176,1.037,177,1.037,178,1.639,179,0.747,180,1.037,181,1.037,182,1.037,183,0.747,184,0.923,185,1.037,186,1.037,187,1.037,188,2.276,189,1.037,190,1.037,191,1.037,192,1.037,193,1.037,194,1.037,195,1.037,196,1.037,197,1.037,198,1.037,199,1.037,200,1.037,201,1.037,202,1.037,203,1.037,204,1.037,205,1.037,206,1.037,207,1.648,208,1.037,209,1.037,210,1.037,211,1.648,212,1.037,213,1.037,214,1.037,215,1.037,216,1.037,217,0.613,218,1.479,219,1.037,220,1.037,221,0.828,222,1.037,223,1.037,224,1.037,225,1.037,226,1.648,227,0.747,228,1.037,229,1.037,230,1.037,231,1.037,232,1.037,233,1.037,234,1.037,235,1.037,236,1.827,237,1.037,238,1.037,239,1.037,240,1.037,241,1.639,242,1.479,243,1.037,244,1.037,245,1.037,246,1.338,247,1.037,248,1.037,249,0.923,250,0.828,251,0.828,252,1.037,253,1.037,254,1.037,255,1.037,256,1.037,257,1.037,258,1.037,259,1.037,260,1.037,261,1.037,262,1.037,263,1.037,264,1.037,265,1.037,266,1.037,267,1.037,268,1.037,269,1.037,270,1.037,271,1.037,272,1.037,273,1.037,274,1.037]],["title/modules/NgcCookieConsentModule.html",[275,1.373,276,1.906]],["body/modules/NgcCookieConsentModule.html",[2,0.415,3,0.481,4,0.351,7,0.481,16,0.351,25,0.786,27,0.351,28,0.039,30,0.875,43,2.421,60,0.03,61,0.03,74,0.625,103,1.751,107,2.421,109,2.841,115,2.431,116,2.164,117,2.421,121,2.254,123,1.585,136,2.183,156,2.183,163,2.421,217,1.792,275,2.379,276,3.301,277,3.891,278,4.851,279,3.891,280,4.851,281,3.891,282,5.285,283,4.363,284,4.851,285,3.212,286,3.891,287,3.891]],["title/interfaces/NgcCookieConsentPopup.html",[0,0.183,112,1.697]],["body/interfaces/NgcCookieConsentPopup.html",[0,0.285,2,0.164,3,0.387,4,0.139,7,0.191,16,0.139,17,0.385,22,0.139,24,0.704,25,1.029,27,0.324,28,0.039,30,0.704,38,0.426,42,0.629,52,1.275,53,0.733,54,1.149,55,1.675,56,1.759,57,0.56,58,0.621,59,0.621,60,0.015,61,0.015,66,1.966,67,0.312,68,1.275,74,0.503,97,1.741,98,0.965,99,1.409,100,1.896,101,2.102,102,0.965,103,1.409,104,2.632,107,2.792,108,0.965,109,2.102,110,1.385,111,1.805,112,2.779,113,3.472,115,1.956,116,1.741,117,2.102,120,3.091,121,1.878,122,1.275,123,0.629,124,2.879,125,2.988,126,0.965,127,0.965,128,0.695,129,0.965,130,0.965,131,0.695,132,0.965,133,0.965,134,0.695,135,0.965,136,1.121,137,0.965,138,1.556,139,1.556,140,2.461,141,2.343,142,1.956,143,2.461,144,2.461,145,2.461,146,2.461,147,1.956,148,2.461,149,2.461,150,0.859,151,0.965,152,1.385,153,0.629,154,0.771,155,0.965,156,0.695,157,0.965,158,0.965,159,0.965,160,0.859,161,0.965,162,0.965,163,1.243,164,2.779,165,2.461,166,0.965,167,0.965,168,0.965,169,0.965,170,0.965,171,0.965,172,0.965,173,0.965,174,2.343,175,2.632,176,0.965,177,0.965,178,1.562,179,0.695,180,0.965,181,0.965,182,0.965,183,0.695,184,0.859,185,0.965,186,0.965,187,0.965,188,2.211,189,0.965,190,0.965,191,0.965,192,0.965,193,0.965,194,0.965,195,0.965,196,0.965,197,0.965,198,0.965,199,0.965,200,0.965,201,0.965,202,0.965,203,0.965,204,0.965,205,0.965,206,0.965,207,1.556,208,0.965,209,0.965,210,0.965,211,1.556,212,0.965,213,0.965,214,0.965,215,0.965,216,0.965,217,0.57,218,1.409,219,0.965,220,0.965,221,0.771,222,0.965,223,0.965,224,0.965,225,0.965,226,1.556,227,0.695,228,0.965,229,0.965,230,0.965,231,0.965,232,0.965,233,0.965,234,0.965,235,0.965,236,1.741,237,0.965,238,0.965,239,0.965,240,0.965,241,1.562,242,1.409,243,0.965,244,0.965,245,0.965,246,1.275,247,0.965,248,0.965,249,0.859,250,0.771,251,0.771,252,0.965,253,0.965,254,0.965,255,0.965,256,0.965,257,0.965,258,0.965,259,0.965,260,0.965,261,0.965,262,0.965,263,0.965,264,0.965,265,0.965,266,0.965,267,0.965,268,0.965,269,0.965,270,0.965,271,0.965,272,0.965,273,0.965,274,0.965,288,2.491,289,2.056,290,1.544,291,1.544,292,1.275,293,1.544,294,1.544,295,1.544,296,1.544,297,1.544,298,1.544,299,1.544,300,1.544,301,1.544,302,1.544,303,1.275]],["title/injectables/NgcCookieConsentService.html",[122,1.243,156,1.373]],["body/injectables/NgcCookieConsentService.html",[0,0.239,2,0.13,3,0.328,4,0.11,7,0.253,16,0.11,17,0.511,22,0.11,24,0.78,25,1.147,27,0.281,28,0.039,30,0.78,38,0.336,42,0.496,52,0.834,53,0.774,54,1.248,55,1.623,56,1.475,57,0.461,58,0.511,59,0.511,60,0.013,61,0.013,66,2.092,67,0.536,68,1.266,74,0.852,97,1.928,98,0.761,99,0.922,100,1.963,101,1.874,102,0.761,103,1.399,104,2.346,107,2.726,108,0.761,109,2.416,110,1.139,111,1.777,112,2.638,113,3.34,115,2.166,116,1.928,117,2.367,120,2.974,121,1.708,122,1.266,123,0.496,124,3.056,125,3.18,126,0.761,127,0.761,128,0.548,129,0.761,130,0.761,131,0.548,132,0.761,133,0.761,134,0.548,135,0.761,136,1.56,137,0.761,138,0.761,139,0.761,140,2.166,141,2.221,142,1.656,143,2.166,144,2.166,145,2.166,146,2.166,147,1.656,148,2.166,149,2.166,150,0.677,151,0.761,152,1.139,153,0.834,154,1.022,155,1.28,156,0.922,157,0.761,158,0.761,159,0.761,160,0.677,161,0.761,162,0.761,163,1.022,164,3.169,165,2.724,166,0.761,167,1.941,168,1.941,169,1.941,170,1.941,171,1.941,172,1.941,173,1.941,174,2.638,175,2.963,176,1.941,177,1.941,178,2.092,179,0.922,180,1.941,181,1.28,182,1.941,183,0.922,184,1.139,185,1.941,186,1.28,187,0.761,188,1.993,189,0.761,190,0.761,191,0.761,192,0.761,193,0.761,194,0.761,195,0.761,196,0.761,197,0.761,198,0.761,199,0.761,200,0.761,201,0.761,202,0.761,203,0.761,204,0.761,205,0.761,206,0.761,207,1.28,208,0.761,209,0.761,210,1.28,211,1.28,212,0.761,213,0.761,214,0.761,215,0.761,216,0.761,217,0.757,218,1.69,219,0.761,220,1.28,221,0.608,222,0.761,223,0.761,224,0.761,225,0.761,226,1.28,227,0.548,228,0.761,229,0.761,230,0.761,231,0.761,232,0.761,233,0.761,234,0.761,235,0.761,236,1.474,237,0.761,238,0.761,239,0.761,240,0.761,241,1.323,242,1.193,243,0.761,244,1.656,245,0.761,246,1.53,247,1.941,248,0.761,249,1.139,250,1.022,251,1.022,252,1.941,253,0.761,254,1.28,255,0.761,256,0.761,257,0.761,258,0.761,259,0.761,260,0.761,261,0.761,262,0.761,263,0.761,264,0.761,265,0.761,266,0.761,267,0.761,268,0.761,269,0.761,270,0.761,271,0.761,272,0.761,273,0.761,274,0.761,289,1.691,292,1.005,303,1.005,304,2.049,305,1.218,306,2.049,307,1.218,308,1.218,309,1.218,310,1.218,311,1.218,312,1.218,313,1.218,314,1.218,315,1.218,316,1.218,317,1.218,318,1.218,319,1.218,320,1.218,321,1.218,322,1.218,323,1.218,324,1.218,325,1.218,326,1.218,327,1.218,328,1.218,329,1.218,330,1.218,331,1.218,332,1.218,333,1.218,334,1.218,335,1.218,336,1.218]],["title/interfaces/NgcCookieConsentStatus.html",[0,0.183,56,1.127]],["body/interfaces/NgcCookieConsentStatus.html",[0,0.346,1,1.989,2,0.381,3,0.442,4,0.323,5,1.989,6,2.235,7,0.442,8,1.785,9,2.235,17,1.146,21,1.785,22,0.323,23,2.558,24,1.316,25,0.723,27,0.484,28,0.038,29,1.785,30,1.299,31,1.989,32,1.989,33,1.989,34,1.989,35,1.785,36,1.785,37,1.989,38,0.986,39,1.785,40,2.558,41,2.558,42,1.874,43,1.785,44,2.235,45,1.989,46,1.989,47,1.989,48,1.989,49,1.785,50,1.989,51,1.989,52,1.874,53,0.651,54,1.146,55,1.541,56,1.699,57,1.248,58,1.384,59,1.384,60,0.028,61,0.028,67,0.929]],["title/classes/NgcCookieOptions.html",[16,0.275,337,2.519]],["body/classes/NgcCookieOptions.html",[2,0.338,3,0.392,4,0.286,7,0.392,16,0.384,22,0.286,24,1.262,25,1.079,27,0.286,28,0.038,30,1.313,53,0.834,60,0.026,61,0.026,64,1.583,67,0.859,74,0.822,75,2.568,76,2.664,96,2.619,116,3.121,227,1.913,337,3.509,338,5.496,339,2.619,340,3.173,341,3.173,342,4.709,343,2.619,344,2.619,345,5.121,346,5.339,347,5.496,348,3.173,349,3.509,350,4.794,351,3.173,352,4.794,353,3.173,354,3.173,355,3.509,356,2.619,357,3.173,358,2.619,359,3.173,360,2.619,361,4.251,362,4.251,363,2.254,364,3.173,365,3.173,366,3.173,367,4.251,368,3.173,369,2.619,370,3.173,371,2.254,372,2.619,373,2.619,374,3.173,375,2.254,376,3.173]],["title/classes/NgcHTMLElements.html",[16,0.275,377,2.519]],["body/classes/NgcHTMLElements.html",[2,0.325,3,0.377,4,0.275,7,0.377,8,2.515,12,2.519,16,0.374,22,0.275,24,1.368,25,1.158,27,0.275,28,0.039,30,1.364,38,1.558,49,1.523,57,1.222,58,1.354,59,1.354,60,0.025,61,0.025,67,0.837,68,2.213,69,3.148,71,3.532,74,0.92,75,2.545,76,2.821,377,3.418,378,5.795,379,3.051,380,5.04,381,3.051,382,3.051,383,3.051,384,3.051,385,3.051,386,4.141,387,3.051,388,3.051,389,3.051,390,3.051]],["title/interfaces/NgcHasCookieConsent.html",[0,0.183,152,1.697]],["body/interfaces/NgcHasCookieConsent.html",[0,0.296,2,0.184,3,0.417,4,0.156,7,0.214,16,0.156,17,0.431,22,0.156,24,0.758,27,0.346,28,0.039,38,0.476,42,1.11,52,1.11,53,0.754,54,1.197,55,1.696,56,1.635,57,0.613,58,0.679,59,0.679,60,0.017,61,0.017,66,2.209,67,0.774,68,0.704,74,0.277,97,2.317,98,1.079,99,1.226,100,2.277,101,2.209,102,1.079,103,0.778,104,2.107,107,2.466,108,1.079,109,2.209,110,1.515,111,1.888,112,2.67,113,3.366,117,2.209,120,2.96,121,1.956,122,1.374,123,0.704,124,2.96,125,3.059,126,1.079,127,1.079,128,0.778,129,1.079,130,1.079,131,0.778,132,1.079,133,1.079,134,0.778,135,1.079,136,1.226,137,1.079,138,1.079,139,1.079,140,1.702,141,1.876,142,1.702,143,1.702,144,1.702,145,1.702,146,1.702,147,1.702,148,1.702,149,1.702,150,1.515,151,1.702,152,1.876,153,0.704,154,0.862,155,1.079,156,0.778,157,1.079,158,1.079,159,1.079,160,0.961,161,1.079,162,1.079,163,1.36,164,2.869,165,2.603,166,1.079,167,1.079,168,1.079,169,1.079,170,1.079,171,1.079,172,1.079,173,1.079,174,2.462,175,2.765,176,1.079,177,1.079,178,1.683,179,0.778,180,1.079,181,1.079,182,1.079,183,0.778,184,0.961,185,1.079,186,1.079,187,1.079,188,2.312,189,1.079,190,1.079,191,1.079,192,1.079,193,1.079,194,1.079,195,1.079,196,1.079,197,1.079,198,1.079,199,1.079,200,1.079,201,1.079,202,1.079,203,1.079,204,1.079,205,1.079,206,1.079,207,1.702,208,1.079,209,1.079,210,1.079,211,1.702,212,1.079,213,1.079,214,1.079,215,1.079,216,1.079,217,0.638,218,1.518,219,1.079,220,1.079,221,0.862,222,1.079,223,1.079,224,1.079,225,1.079,226,1.702,227,0.778,228,1.079,229,1.079,230,1.079,231,1.079,232,1.079,233,1.079,234,1.079,235,1.079,236,1.876,237,1.079,238,1.079,239,1.079,240,1.079,241,1.683,242,1.518,243,1.079,244,1.079,245,1.079,246,1.374,247,1.079,248,1.079,249,0.961,250,0.862,251,0.862,252,1.079,253,1.079,254,1.079,255,1.079,256,1.079,257,1.079,258,1.079,259,1.079,260,1.079,261,1.079,262,1.079,263,1.079,264,1.079,265,1.079,266,1.079,267,1.079,268,1.079,269,1.079,270,1.079,271,1.079,272,1.079,273,1.079,274,1.079]],["title/interfaces/NgcInitializeEvent.html",[0,0.183,134,1.373]],["body/interfaces/NgcInitializeEvent.html",[0,0.305,2,0.45,3,0.522,4,0.381,7,0.522,22,0.381,27,0.381,28,0.038,53,0.776,54,1.366,55,1.984,57,1.232,58,1.366,59,1.366,60,0.031,61,0.031,67,1.03,74,0.678,134,2.295,178,2.106,391,4.22,392,2.347,393,2.636]],["title/classes/NgcLawOptions.html",[16,0.275,394,2.519]],["body/classes/NgcLawOptions.html",[2,0.429,3,0.498,4,0.364,7,0.498,16,0.447,22,0.364,24,1.207,25,1.001,27,0.364,28,0.037,48,2.24,53,0.57,60,0.031,61,0.031,64,2.01,67,1.001,74,0.647,75,2.231,76,2.01,93,2.862,111,1.641,153,1.641,183,2.231,241,2.795,242,2.521,246,1.641,355,3.326,363,2.862,371,3.814,394,4.091,395,5.368,396,4.029,397,5.601,398,4.029,399,3.096,400,4.029,401,2.862,402,3.326,403,4.029,404,4.029,405,4.029]],["title/interfaces/NgcLayouts.html",[0,0.183,51,1.697]],["body/interfaces/NgcLayouts.html",[0,0.339,1,1.972,2,0.378,3,0.438,4,0.32,5,2.543,6,2.215,7,0.438,8,2.282,9,2.857,17,1.262,21,2.282,22,0.32,23,2.815,24,1.339,25,0.924,27,0.483,28,0.039,29,1.769,30,0.797,31,1.972,32,1.972,33,1.972,34,1.972,35,1.769,36,1.769,37,1.972,38,0.977,39,1.769,40,2.974,41,2.974,42,2.178,43,2.282,44,2.857,45,2.543,46,2.543,47,2.543,48,2.543,49,2.282,50,2.543,51,2.543,52,1.444,53,0.502,54,0.884,55,1.188,56,1.31,57,1.028,58,1.14,59,1.14,60,0.028,61,0.028,406,3.546]],["title/classes/NgcLocationOptions.html",[16,0.275,407,2.519]],["body/classes/NgcLocationOptions.html",[2,0.281,3,0.326,4,0.238,7,0.326,16,0.338,17,1.331,22,0.238,23,2.081,25,1.121,27,0.238,28,0.038,30,0.978,45,2.081,46,2.081,53,0.53,60,0.023,61,0.023,64,1.316,67,0.879,74,0.699,75,2.403,76,1.868,77,2.178,99,1.187,101,1.316,111,1.928,141,2.081,153,2.516,160,2.081,179,1.685,183,2.131,188,2.362,217,0.974,218,2.131,227,1.958,242,2.337,275,1.685,339,3.09,349,3.09,363,3.363,371,1.874,375,2.659,399,3.243,402,2.178,407,3.09,408,4.734,409,2.178,410,2.638,411,2.178,412,2.638,413,2.178,414,2.178,415,1.874,416,2.638,417,2.638,418,4.35,419,5.192,420,5.192,421,2.638,422,3.743,423,3.743,424,4.734,425,3.743,426,3.743,427,3.743,428,4.734,429,4.734,430,4.734,431,2.638,432,3.743,433,3.743,434,3.743,435,4.734,436,3.743,437,3.743,438,4.734,439,3.09,440,3.743,441,3.743,442,3.743,443,2.081,444,4.734,445,3.743,446,3.09,447,3.743,448,3.09,449,3.09,450,3.743,451,3.743,452,3.743,453,3.743,454,3.743,455,3.743]],["title/interfaces/NgcNoCookieLawEvent.html",[0,0.183,131,1.373]],["body/interfaces/NgcNoCookieLawEvent.html",[0,0.304,2,0.446,3,0.518,4,0.378,7,0.518,22,0.378,24,1.329,27,0.378,28,0.038,53,0.719,60,0.031,61,0.031,67,1.025,74,0.815,131,2.284,183,1.885,241,2.832,242,2.735,392,2.328,393,2.615,399,3.17,456,4.187,457,4.187,458,4.187]],["title/interfaces/NgcPalette.html",[0,0.183,35,1.523]],["body/interfaces/NgcPalette.html",[0,0.335,1,1.888,2,0.362,3,0.42,4,0.306,5,1.888,6,2.121,7,0.42,8,1.694,9,2.121,17,1.236,21,1.694,22,0.306,23,2.472,24,1.371,25,0.898,27,0.475,28,0.038,29,2.218,30,1.329,31,2.472,32,2.472,33,2.472,34,2.472,35,2.218,36,2.625,37,2.925,38,1.449,39,2.625,40,2.472,41,2.472,42,1.811,43,1.694,44,2.121,45,1.888,46,1.888,47,1.888,48,1.888,49,1.694,50,1.888,51,1.888,52,1.383,53,0.481,54,0.846,55,1.138,56,1.254,57,1,58,1.108,59,1.108,60,0.027,61,0.027,67,0.898,74,0.845]],["title/classes/NgcPaletteOptions.html",[16,0.275,459,2.519]],["body/classes/NgcPaletteOptions.html",[0,0.202,2,0.359,3,0.417,4,0.304,7,0.417,16,0.4,17,1.104,21,2.618,22,0.304,25,1.101,27,0.304,28,0.039,29,2.209,30,1.3,31,2.462,32,2.462,33,2.462,34,2.462,35,2.945,36,2.79,37,2.918,38,1.22,39,2.79,60,0.027,61,0.027,64,1.683,67,0.895,74,0.794,75,2.224,76,2.466,82,2.785,84,2.785,93,2.397,111,2.137,121,1.374,459,3.655,460,5.247,461,5.247,462,4.427,463,5.782,464,5.247,465,5.247,466,3.374]],["title/interfaces/NgcStatusChangeEvent.html",[0,0.183,128,1.373]],["body/interfaces/NgcStatusChangeEvent.html",[0,0.293,2,0.42,3,0.487,4,0.356,7,0.487,22,0.356,27,0.356,28,0.038,53,0.753,54,1.218,55,2.016,57,1.195,58,1.325,59,1.325,60,0.03,61,0.03,67,0.988,74,0.785,120,2.955,128,2.2,150,2.718,179,1.773,188,2.773,236,3.09,373,4.035,392,2.19,393,2.461,467,3.939,468,3.939,469,4.888,470,4.888]],["title/injectables/WindowService.html",[122,1.243,136,1.373]],["body/injectables/WindowService.html",[2,0.436,3,0.506,4,0.369,7,0.506,16,0.369,22,0.369,25,0.827,27,0.369,28,0.038,60,0.031,61,0.031,66,2.882,101,2.697,107,2.697,118,2.555,121,1.666,122,2.201,123,1.666,136,2.252,153,2.038,154,2.496,249,2.275,471,3.377,472,5.003,473,5.405,474,4.091,475,4.091,476,4.13,477,3.377,478,4.091,479,4.091,480,5.003]],["title/changelog.html",[246,1.043,481,1.819,482,2.56]],["body/changelog.html",[28,0.03,30,0.993,50,1.868,53,0.476,54,0.837,57,0.755,60,0.027,61,0.027,62,2.387,68,2.38,71,2.098,72,3.137,73,2.773,100,1.512,103,1.512,110,2.455,153,1.368,178,2.203,179,1.512,218,1.512,221,2.461,250,2.461,251,1.676,360,2.773,415,3.866,483,3.359,484,3.722,485,2.773,486,3.359,487,5.585,488,4.415,489,4.324,490,3.359,491,3.359,492,3.359,493,3.359,494,3.359,495,5.238,496,4.415,497,4.415,498,2.387,499,3.359,500,3.359,501,4.415,502,4.415,503,3.359,504,3.359,505,4.415,506,4.071,507,3.359,508,3.359,509,3.359,510,3.359,511,3.359,512,4.415,513,4.932,514,3.359,515,3.359,516,3.359,517,3.359,518,3.359,519,3.359,520,3.359,521,4.492,522,3.359,523,3.359,524,3.359,525,3.645,526,3.359,527,3.359,528,3.359,529,2.387,530,3.359,531,3.359,532,4.415,533,3.359,534,3.359,535,3.359,536,4.415,537,3.359,538,3.359,539,2.773,540,3.359,541,2.773,542,3.359,543,2.773,544,3.359,545,3.359,546,2.773,547,3.359,548,3.359,549,3.359,550,3.359,551,3.359,552,3.359,553,3.359,554,3.359]],["title/dependencies.html",[443,2.037,546,2.113]],["body/dependencies.html",[28,0.037,60,0.034,61,0.034,100,2.124,123,1.922,285,3.895,443,2.624,555,5.446,556,3.895]],["title/miscellaneous/functions.html",[118,2.288,557,1.599]],["body/miscellaneous/functions.html",[22,0.428,28,0.034,60,0.034,61,0.034,118,2.965,471,3.918,476,4.751,557,2.965,558,4.747]],["title/index.html",[22,0.231,246,1.043,481,1.819]],["body/index.html",[4,0.337,10,1.367,13,2.708,16,0.337,17,1.313,21,0.826,27,0.337,28,0.039,29,0.826,36,1.315,38,0.726,41,0.921,43,1.866,47,1.465,53,0.786,54,1.179,57,0.592,58,0.413,59,0.413,60,0.016,61,0.016,64,0.826,65,1.367,69,1.035,71,2.847,72,1.872,74,0.266,75,1.186,80,1.367,83,2.708,87,1.367,88,2.175,90,1.367,91,1.367,92,1.367,99,0.745,100,2.43,103,0.745,109,0.826,111,0.675,117,1.637,121,2.174,123,1.073,125,1.465,128,0.745,131,0.745,134,0.745,154,1.315,156,1.477,163,1.315,164,2.535,174,1.465,184,1.465,217,0.612,218,1.477,221,2.275,227,0.745,250,1.315,251,2.432,275,2.129,276,2.549,283,2.175,342,2.175,344,2.175,356,1.367,358,1.367,372,1.367,375,1.872,392,2.27,393,1.035,399,1.035,401,1.177,409,1.367,411,1.367,414,1.367,415,1.177,443,1.465,446,1.367,448,2.175,449,1.367,477,2.708,484,1.177,489,1.367,498,1.177,506,1.367,521,1.367,525,2.708,529,1.872,539,1.367,541,1.367,543,2.708,556,1.367,559,5.338,560,1.656,561,1.367,562,1.656,563,2.635,564,1.656,565,1.656,566,1.367,567,1.656,568,1.656,569,4.558,570,1.367,571,3.281,572,2.635,573,1.656,574,2.635,575,1.656,576,1.656,577,2.635,578,3.281,579,2.635,580,1.656,581,1.656,582,1.656,583,2.635,584,1.656,585,3.739,586,1.656,587,1.656,588,1.656,589,1.656,590,1.656,591,2.635,592,2.635,593,2.635,594,1.656,595,1.656,596,1.656,597,1.656,598,2.635,599,2.635,600,1.656,601,1.656,602,1.656,603,2.635,604,1.656,605,1.656,606,1.656,607,1.656,608,1.656,609,1.656,610,3.281,611,1.367,612,1.656,613,1.656,614,1.656,615,1.367,616,1.656,617,2.635,618,1.656,619,1.656,620,1.656,621,3.739,622,1.656,623,1.656,624,1.656,625,1.367,626,1.367,627,1.367,628,1.035,629,2.175,630,4.347,631,1.656,632,1.367,633,1.656,634,1.656,635,1.656,636,1.656,637,1.656,638,1.656,639,4.347,640,1.656,641,4.558,642,1.656,643,3.281,644,2.635,645,4.731,646,1.656,647,2.635,648,2.635,649,2.635,650,2.635,651,2.635,652,1.656,653,2.635,654,1.656,655,1.656,656,1.656,657,1.656,658,1.656,659,1.656,660,1.656,661,2.635,662,2.635,663,2.635,664,1.656,665,1.656,666,4.347,667,1.656,668,1.656,669,1.656,670,1.656,671,1.656,672,1.656,673,1.656,674,1.656,675,1.656,676,1.656,677,1.656,678,1.656,679,1.656,680,1.656,681,1.656,682,1.656,683,1.656,684,1.656,685,1.656,686,1.656,687,1.367,688,1.656,689,1.656,690,1.656,691,1.656,692,1.656,693,1.656,694,1.367,695,1.656,696,1.656,697,1.656,698,1.656,699,1.656,700,1.656,701,1.656,702,1.656,703,1.656,704,1.656,705,1.656,706,1.656,707,1.656,708,1.656,709,2.635,710,1.656,711,1.656,712,1.656,713,1.656,714,1.656,715,1.656,716,1.656,717,1.656,718,1.656,719,1.656,720,1.656,721,1.656,722,2.635,723,1.656,724,1.656,725,1.656,726,1.656,727,1.656,728,1.656,729,1.656,730,1.656,731,1.656,732,1.656,733,1.656,734,1.656,735,1.656,736,1.656,737,1.656,738,1.656,739,1.656,740,1.656,741,1.656,742,1.656,743,1.656,744,2.331,745,1.367,746,1.367,747,1.367,748,1.367,749,1.656,750,2.175]],["title/license.html",[246,1.043,481,1.819,744,1.819]],["body/license.html",[4,0.341,17,1.187,28,0.029,60,0.029,61,0.029,124,2.102,217,1.396,343,3.121,392,2.102,401,2.686,413,3.121,439,4.306,484,2.686,561,3.121,570,3.121,615,3.933,628,2.362,687,3.121,694,3.121,744,2.686,745,4.306,746,3.121,747,3.121,748,3.121,750,3.933,751,4.764,752,3.781,753,3.781,754,3.781,755,4.764,756,3.781,757,5.476,758,5.972,759,3.781,760,4.764,761,3.781,762,5.216,763,4.764,764,3.121,765,3.781,766,3.781,767,3.781,768,3.781,769,3.781,770,3.781,771,3.781,772,3.781,773,3.781,774,3.781,775,4.764,776,3.781,777,3.781,778,4.764,779,3.781,780,3.781,781,3.781,782,3.781,783,3.781,784,3.781,785,3.781,786,3.781,787,3.781,788,3.781,789,3.781,790,3.781,791,3.781,792,3.781,793,3.781,794,3.781,795,3.781,796,3.781]],["title/modules.html",[275,1.864]],["body/modules.html",[28,0.034,60,0.034,61,0.034,275,2.156,276,2.992,797,4.79,798,4.79,799,4.79]],["title/overview.html",[800,3.418]],["body/overview.html",[0,0.274,16,0.414,27,0.414,28,0.033,60,0.033,61,0.033,122,1.867,217,1.693,275,2.41,369,3.783,443,2.549,485,3.783,498,3.257,566,3.783,628,2.863,629,3.783,632,3.783,800,3.783,801,4.583,802,5.355,803,4.583]],["title/miscellaneous/typealiases.html",[557,1.599,804,3.664]],["body/miscellaneous/typealiases.html",[2,0.505,5,2.088,8,1.873,22,0.339,24,0.844,28,0.038,40,2.088,53,0.798,60,0.029,61,0.029,68,1.529,69,2.345,74,0.938,99,2.34,529,4.002,557,2.345,611,4.292,625,3.099,626,3.099,627,4.509,628,2.963,764,3.915,805,3.754,806,5.199,807,5.633,808,5.753,809,5.199,810,5.199,811,5.199,812,5.199,813,5.633,814,3.754,815,5.199,816,4.743,817,3.754,818,3.754]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["000",{"_index":623,"title":{},"body":{"index.html":{}}}],["000000",{"_index":464,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["02496e8",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["02ada28",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":369,"title":{},"body":{"classes/NgcCookieOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["1.4.7",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":485,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["11",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":484,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["22",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["2ab9341",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["2d960c8",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":566,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.1.0",{"_index":556,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["365",{"_index":350,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["37371b6",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["5000",{"_index":444,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["5000m",{"_index":453,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["5f8a340",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":498,"title":{},"body":{"changelog.html":{},"index.html":{},"overview.html":{}}}],["6.0.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["6cd260f",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["9835145",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["_blank",{"_index":95,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["_window",{"_index":476,"title":{},"body":{"injectables/WindowService.html":{},"miscellaneous/functions.html":{}}}],["a0849f2",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":570,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessor",{"_index":472,"title":{},"body":{"injectables/WindowService.html":{}}}],["action",{"_index":561,"title":{},"body":{"index.html":{},"license.html":{}}}],["ad",{"_index":160,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{}}}],["add",{"_index":415,"title":{},"body":{"classes/NgcLocationOptions.html":{},"changelog.html":{},"index.html":{}}}],["addit",{"_index":32,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["adjust",{"_index":587,"title":{},"body":{"index.html":{}}}],["alias",{"_index":805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":57,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{}}}],["amd",{"_index":601,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":770,"title":{},"body":{"license.html":{}}}],["anglar",{"_index":696,"title":{},"body":{"index.html":{}}}],["angular",{"_index":221,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":285,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"dependencies.html":{}}}],["angular/cor",{"_index":123,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"dependencies.html":{},"index.html":{}}}],["answer",{"_index":452,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["api",{"_index":155,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["app",{"_index":525,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["app.component.html",{"_index":649,"title":{},"body":{"index.html":{}}}],["app.component.scss",{"_index":651,"title":{},"body":{"index.html":{}}}],["appcompon",{"_index":630,"title":{},"body":{"index.html":{}}}],["applic",{"_index":184,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["appmodul",{"_index":633,"title":{},"body":{"index.html":{}}}],["aris",{"_index":795,"title":{},"body":{"license.html":{}}}],["array",{"_index":424,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["asset",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":759,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":433,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["attribut",{"_index":34,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["author",{"_index":786,"title":{},"body":{"license.html":{}}}],["avail",{"_index":798,"title":{},"body":{"modules.html":{}}}],["background",{"_index":36,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["bar",{"_index":529,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["basic",{"_index":99,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["befor",{"_index":470,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["belong",{"_index":361,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["best",{"_index":91,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["between",{"_index":45,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{}}}],["block",{"_index":817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":120,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["bootstrap",{"_index":632,"title":{},"body":{"index.html":{},"overview.html":{}}}],["border",{"_index":37,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["bottom",{"_index":815,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["break",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":799,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":249,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["browserlang",{"_index":709,"title":{},"body":{"index.html":{}}}],["bug",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":575,"title":{},"body":{"index.html":{}}}],["built",{"_index":41,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["bundl",{"_index":590,"title":{},"body":{"index.html":{}}}],["button",{"_index":21,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["c",{"_index":746,"title":{},"body":{"index.html":{},"license.html":{}}}],["call",{"_index":50,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"changelog.html":{}}}],["callback",{"_index":110,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{}}}],["can't",{"_index":445,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["cc",{"_index":15,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["ccservic",{"_index":662,"title":{},"body":{"index.html":{}}}],["chang",{"_index":179,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{}}}],["change.ev",{"_index":130,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["change.event.t",{"_index":468,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["changelog",{"_index":482,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":754,"title":{},"body":{"license.html":{}}}],["checkpopupinstanti",{"_index":304,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["checkpopupinstantiated(method",{"_index":210,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["choic",{"_index":359,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["chosen",{"_index":469,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["chosenbefor",{"_index":236,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["claim",{"_index":789,"title":{},"body":{"license.html":{}}}],["class",{"_index":16,"title":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{}},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{},"index.html":{},"overview.html":{}}}],["classic",{"_index":818,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["clear",{"_index":254,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["clearstatu",{"_index":140,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cli",{"_index":543,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cli.json",{"_index":581,"title":{},"body":{"index.html":{}}}],["close",{"_index":68,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["close(showrevok",{"_index":142,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["code",{"_index":399,"title":{},"body":{"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"index.html":{}}}],["colour",{"_index":31,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["commit",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":466,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["commonmodul",{"_index":284,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["complet",{"_index":702,"title":{},"body":{"index.html":{}}}],["complianc",{"_index":8,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"miscellaneous/typealiases.html":{}}}],["compon",{"_index":639,"title":{},"body":{"index.html":{}}}],["condit",{"_index":774,"title":{},"body":{"license.html":{}}}],["config",{"_index":117,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["configur",{"_index":218,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"changelog.html":{},"index.html":{}}}],["connect",{"_index":796,"title":{},"body":{"license.html":{}}}],["consent",{"_index":54,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{}}}],["const",{"_index":617,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":305,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["constructor(priv",{"_index":661,"title":{},"body":{"index.html":{}}}],["constructor(windowservic",{"_index":186,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["contain",{"_index":11,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["content",{"_index":65,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["contract",{"_index":793,"title":{},"body":{"license.html":{}}}],["cooki",{"_index":53,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cookie.allow",{"_index":717,"title":{},"body":{"index.html":{}}}],["cookie.deni",{"_index":718,"title":{},"body":{"index.html":{}}}],["cookie.dismiss",{"_index":716,"title":{},"body":{"index.html":{}}}],["cookie.domainopt",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["cookie.link",{"_index":719,"title":{},"body":{"index.html":{}}}],["cookie.messag",{"_index":715,"title":{},"body":{"index.html":{}}}],["cookie.polici",{"_index":720,"title":{},"body":{"index.html":{}}}],["cookieconfig:ngccookieconsentconfig",{"_index":618,"title":{},"body":{"index.html":{}}}],["cookiecons",{"_index":100,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent';th",{"_index":604,"title":{},"body":{"index.html":{}}}],["cookieconsent.j",{"_index":162,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cookieconsent.popup",{"_index":138,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cookieconsent.umd.j",{"_index":597,"title":{},"body":{"index.html":{}}}],["cookieconsent/bundles/ngx",{"_index":596,"title":{},"body":{"index.html":{}}}],["cookieconsent_statu",{"_index":352,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["cookieconsentnow",{"_index":573,"title":{},"body":{"index.html":{}}}],["coooki",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["copi",{"_index":757,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":745,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["correspond",{"_index":340,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["countri",{"_index":242,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["countrycod",{"_index":241,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["creat",{"_index":372,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["credit",{"_index":741,"title":{},"body":{"index.html":{}}}],["css",{"_index":18,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["current",{"_index":165,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["custom",{"_index":688,"title":{},"body":{"index.html":{}}}],["d674b93",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":790,"title":{},"body":{"license.html":{}}}],["data['cookie.allow",{"_index":731,"title":{},"body":{"index.html":{}}}],["data['cookie.deni",{"_index":733,"title":{},"body":{"index.html":{}}}],["data['cookie.dismiss",{"_index":729,"title":{},"body":{"index.html":{}}}],["data['cookie.head",{"_index":725,"title":{},"body":{"index.html":{}}}],["data['cookie.link",{"_index":735,"title":{},"body":{"index.html":{}}}],["data['cookie.messag",{"_index":727,"title":{},"body":{"index.html":{}}}],["data['cookie.polici",{"_index":737,"title":{},"body":{"index.html":{}}}],["date",{"_index":366,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["day",{"_index":368,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["deal",{"_index":760,"title":{},"body":{"license.html":{}}}],["declar",{"_index":629,"title":{},"body":{"index.html":{},"overview.html":{}}}],["declin",{"_index":80,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["default",{"_index":75,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["defin",{"_index":25,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{}}}],["demo",{"_index":521,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deni",{"_index":58,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["depend",{"_index":443,"title":{"dependencies.html":{}},"body":{"classes/NgcLocationOptions.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploy",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["descript",{"_index":7,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{}}}],["destroy",{"_index":143,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["differ",{"_index":609,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":409,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["dismiss",{"_index":59,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["display",{"_index":691,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":768,"title":{},"body":{"license.html":{}}}],["doc",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":687,"title":{},"body":{"index.html":{},"license.html":{}}}],["domain",{"_index":342,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["don't",{"_index":451,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["due",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":699,"title":{},"body":{"index.html":{}}}],["e1bf9bf",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":9,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["easili",{"_index":692,"title":{},"body":{"index.html":{}}}],["edgeless",{"_index":626,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["edit",{"_index":580,"title":{},"body":{"index.html":{}}}],["element",{"_index":49,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["elements.t",{"_index":379,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:11",{"_index":390,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:13",{"_index":385,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:15",{"_index":381,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:17",{"_index":384,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:19",{"_index":388,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:21",{"_index":382,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:23",{"_index":383,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:7",{"_index":387,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:9",{"_index":389,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["en",{"_index":712,"title":{},"body":{"index.html":{}}}],["en.json",{"_index":700,"title":{},"body":{"index.html":{}}}],["enabl",{"_index":402,"title":{},"body":{"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["encourag",{"_index":410,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["end",{"_index":612,"title":{},"body":{"index.html":{}}}],["ensur",{"_index":90,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["error",{"_index":447,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["error(`cooki",{"_index":214,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["event",{"_index":392,"title":{},"body":{"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{},"license.html":{}}}],["event/initialize.ev",{"_index":135,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["event/no",{"_index":132,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["event/statu",{"_index":129,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["exact",{"_index":607,"title":{},"body":{"index.html":{}}}],["execut",{"_index":417,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["experi",{"_index":92,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["expir",{"_index":365,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["expiri",{"_index":370,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["expiryday",{"_index":345,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":780,"title":{},"body":{"license.html":{}}}],["f1d600",{"_index":624,"title":{},"body":{"index.html":{}}}],["f8e71c",{"_index":463,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["fadein",{"_index":144,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["fadeout",{"_index":145,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["fail",{"_index":435,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["fals",{"_index":355,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{}}}],["fashion",{"_index":426,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["featur",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["fedcbd9",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["fff",{"_index":465,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"index.html":{},"license.html":{}}}],["fire",{"_index":393,"title":{},"body":{"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["first",{"_index":434,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["fit",{"_index":783,"title":{},"body":{"license.html":{}}}],["fix",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":373,"title":{},"body":{"classes/NgcCookieOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["follow",{"_index":694,"title":{},"body":{"index.html":{},"license.html":{}}}],["format",{"_index":600,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":279,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["forroot(config",{"_index":280,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["fr",{"_index":707,"title":{},"body":{"index.html":{}}}],["fr.json",{"_index":701,"title":{},"body":{"index.html":{}}}],["free",{"_index":413,"title":{},"body":{"classes/NgcLocationOptions.html":{},"license.html":{}}}],["freegeoip",{"_index":428,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["fulli",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":118,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":773,"title":{},"body":{"license.html":{}}}],["get",{"_index":246,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{}}}],["get(['cookie.head",{"_index":714,"title":{},"body":{"index.html":{}}}],["getconfig",{"_index":247,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["getnativewindow",{"_index":474,"title":{},"body":{"injectables/WindowService.html":{}}}],["getstatu",{"_index":104,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["gettransit",{"_index":252,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["given",{"_index":458,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{}}}],["global",{"_index":477,"title":{},"body":{"injectables/WindowService.html":{},"index.html":{}}}],["go",{"_index":422,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["grant",{"_index":753,"title":{},"body":{"license.html":{}}}],["graph",{"_index":797,"title":{},"body":{"modules.html":{}}}],["group",{"_index":20,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["guid",{"_index":364,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["handler",{"_index":412,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["hard",{"_index":400,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["hasansw",{"_index":148,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["hascons",{"_index":149,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["hastransit",{"_index":102,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["header",{"_index":69,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcHTMLElements.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["header}}&nbsp",{"_index":386,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["here",{"_index":642,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":752,"title":{},"body":{"license.html":{}}}],["higher",{"_index":567,"title":{},"body":{"index.html":{}}}],["highlight",{"_index":461,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["hoc",{"_index":425,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["holder",{"_index":787,"title":{},"body":{"license.html":{}}}],["hook",{"_index":228,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["href",{"_index":70,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["html",{"_index":12,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcHTMLElements.html":{}}}],["http",{"_index":376,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["https://cookiesandyou.com",{"_index":85,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["https://goo.gl/s2hy2a",{"_index":622,"title":{},"body":{"index.html":{}}}],["https://tinesoft.github.io/ngx",{"_index":562,"title":{},"body":{"index.html":{}}}],["i.",{"_index":640,"title":{},"body":{"index.html":{}}}],["i18n",{"_index":690,"title":{},"body":{"index.html":{}}}],["ignor",{"_index":403,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["implement",{"_index":411,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["impli",{"_index":781,"title":{},"body":{"license.html":{}}}],["import",{"_index":121,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["includ",{"_index":762,"title":{},"body":{"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["index.html",{"_index":602,"title":{},"body":{"index.html":{}}}],["indic",{"_index":150,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"miscellaneous/typealiases.html":{}}}],["init",{"_index":244,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["init(config",{"_index":220,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initi",{"_index":178,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"changelog.html":{}}}],["initialis",{"_index":105,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["initialise(config",{"_index":108,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializesourc",{"_index":170,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializesubscript",{"_index":657,"title":{},"body":{"index.html":{}}}],["inject",{"_index":122,"title":{"injectables/NgcCookieConsentService.html":{},"injectables/WindowService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"overview.html":{}}}],["insit",{"_index":743,"title":{},"body":{"index.html":{}}}],["instal",{"_index":569,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":166,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["instanti",{"_index":215,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["interact",{"_index":154,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"overview.html":{}}}],["interfaces.t",{"_index":6,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["interfaces.ts:30",{"_index":406,"title":{},"body":{"interfaces/NgcLayouts.html":{}}}],["interfaces.ts:7",{"_index":26,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["invok",{"_index":216,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["involv",{"_index":693,"title":{},"body":{"index.html":{}}}],["ipinfo",{"_index":429,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["isopen",{"_index":146,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["json",{"_index":697,"title":{},"body":{"index.html":{}}}],["keep",{"_index":356,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["key",{"_index":23,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{}}}],["kind",{"_index":779,"title":{},"body":{"license.html":{}}}],["kondo",{"_index":748,"title":{},"body":{"index.html":{},"license.html":{}}}],["later",{"_index":654,"title":{},"body":{"index.html":{}}}],["latest",{"_index":565,"title":{},"body":{"index.html":{}}}],["law",{"_index":183,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["law.ev",{"_index":133,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["law.event.t",{"_index":457,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{}}}],["layout",{"_index":40,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"miscellaneous/typealiases.html":{}}}],["leak",{"_index":680,"title":{},"body":{"index.html":{}}}],["learn",{"_index":87,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["left",{"_index":816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["legend",{"_index":801,"title":{},"body":{"overview.html":{}}}],["letter",{"_index":442,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["level",{"_index":10,"title":{},"body":{"interfaces/NgcCompliance.html":{},"index.html":{}}}],["liabil",{"_index":791,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":788,"title":{},"body":{"license.html":{}}}],["librari",{"_index":163,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["licens",{"_index":744,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":763,"title":{},"body":{"license.html":{}}}],["link",{"_index":38,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["list",{"_index":578,"title":{},"body":{"index.html":{}}}],["load",{"_index":599,"title":{},"body":{"index.html":{}}}],["loader",{"_index":593,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":619,"title":{},"body":{"index.html":{}}}],["locat",{"_index":363,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["look",{"_index":594,"title":{},"body":{"index.html":{}}}],["magic",{"_index":157,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["main",{"_index":43,"title":{},"body":{"interfaces/NgcCompliance.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["make",{"_index":539,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maker",{"_index":158,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["mandatori",{"_index":541,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["map",{"_index":591,"title":{},"body":{"index.html":{}}}],["marker",{"_index":42,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["match",{"_index":61,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["maxmind",{"_index":430,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["memori",{"_index":679,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":782,"title":{},"body":{"license.html":{}}}],["merg",{"_index":766,"title":{},"body":{"license.html":{}}}],["messag",{"_index":71,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcHTMLElements.html":{},"changelog.html":{},"index.html":{}}}],["messagelink",{"_index":380,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["meta",{"_index":598,"title":{},"body":{"index.html":{}}}],["method",{"_index":103,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["millisecond",{"_index":455,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["minimum",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":557,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":750,"title":{},"body":{"index.html":{},"license.html":{}}}],["model/common",{"_index":127,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["modif",{"_index":440,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["modifi",{"_index":765,"title":{},"body":{"license.html":{}}}],["modul",{"_index":275,"title":{"modules/NgcCookieConsentModule.html":{},"modules.html":{}},"body":{"modules/NgcCookieConsentModule.html":{},"classes/NgcLocationOptions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":282,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["more",{"_index":88,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["move",{"_index":436,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["name",{"_index":116,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{}}}],["nativ",{"_index":478,"title":{},"body":{"injectables/WindowService.html":{}}}],["nativewindow",{"_index":473,"title":{},"body":{"injectables/WindowService.html":{}}}],["need",{"_index":13,"title":{},"body":{"interfaces/NgcCompliance.html":{},"index.html":{}}}],["never",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":188,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["next",{"_index":438,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["ng6",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["ngccomplianc",{"_index":1,"title":{"interfaces/NgcCompliance.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["ngccontentopt",{"_index":62,"title":{"classes/NgcContentOptions.html":{}},"body":{"classes/NgcContentOptions.html":{},"changelog.html":{}}}],["ngccookiecompli",{"_index":806,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngccookiecons",{"_index":97,"title":{"interfaces/NgcCookieConsent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["ngccookieconsentconfig",{"_index":109,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["ngccookieconsentmodul",{"_index":276,"title":{"modules/NgcCookieConsentModule.html":{}},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{},"modules.html":{}}}],["ngccookieconsentmodule.forroot",{"_index":616,"title":{},"body":{"index.html":{}}}],["ngccookieconsentmodule.forroot(cookieconfig",{"_index":631,"title":{},"body":{"index.html":{}}}],["ngccookieconsentpopup",{"_index":112,"title":{"interfaces/NgcCookieConsentPopup.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["ngccookieconsentservic",{"_index":156,"title":{"injectables/NgcCookieConsentService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["ngccookieconsentstatu",{"_index":56,"title":{"interfaces/NgcCookieConsentStatus.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["ngccookiecontentservic",{"_index":638,"title":{},"body":{"index.html":{}}}],["ngccookielayout",{"_index":809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngccookieopt",{"_index":337,"title":{"classes/NgcCookieOptions.html":{}},"body":{"classes/NgcCookieOptions.html":{}}}],["ngccookieposit",{"_index":810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngccookiethem",{"_index":811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngccookietyp",{"_index":812,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngchascookiecons",{"_index":152,"title":{"interfaces/NgcHasCookieConsent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["ngchtmlelement",{"_index":377,"title":{"classes/NgcHTMLElements.html":{}},"body":{"classes/NgcHTMLElements.html":{}}}],["ngcinitializeev",{"_index":134,"title":{"interfaces/NgcInitializeEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"index.html":{}}}],["ngclawopt",{"_index":394,"title":{"classes/NgcLawOptions.html":{}},"body":{"classes/NgcLawOptions.html":{}}}],["ngclayout",{"_index":51,"title":{"interfaces/NgcLayouts.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["ngclocationopt",{"_index":407,"title":{"classes/NgcLocationOptions.html":{}},"body":{"classes/NgcLocationOptions.html":{}}}],["ngcnocookielawev",{"_index":131,"title":{"interfaces/NgcNoCookieLawEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"index.html":{}}}],["ngcpalett",{"_index":35,"title":{"interfaces/NgcPalette.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["ngcpaletteopt",{"_index":459,"title":{"classes/NgcPaletteOptions.html":{}},"body":{"classes/NgcPaletteOptions.html":{}}}],["ngcstatuschangeev",{"_index":128,"title":{"interfaces/NgcStatusChangeEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["ngmodul",{"_index":283,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":677,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":663,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":559,"title":{},"body":{"index.html":{}}}],["nocookielaw",{"_index":185,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["nocookielawsourc",{"_index":173,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["nocookielawsubscript",{"_index":660,"title":{},"body":{"index.html":{}}}],["node",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["node_modules/cookieconsent/build/cookieconsent.min.css",{"_index":584,"title":{},"body":{"index.html":{}}}],["node_modules/cookieconsent/build/cookieconsent.min.j",{"_index":583,"title":{},"body":{"index.html":{}}}],["node_modules/ngx",{"_index":595,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":785,"title":{},"body":{"license.html":{}}}],["note",{"_index":574,"title":{},"body":{"index.html":{}}}],["note:if",{"_index":586,"title":{},"body":{"index.html":{}}}],["notic",{"_index":615,"title":{},"body":{"index.html":{},"license.html":{}}}],["notifi",{"_index":175,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["now",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":571,"title":{},"body":{"index.html":{}}}],["null",{"_index":212,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["number",{"_index":349,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["object",{"_index":101,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"injectables/WindowService.html":{}}}],["objet",{"_index":159,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["observ",{"_index":125,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["obtain",{"_index":756,"title":{},"body":{"license.html":{}}}],["on",{"_index":414,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["onc",{"_index":603,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":644,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":643,"title":{},"body":{"index.html":{}}}],["oninitialis",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["onnocookielaw",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["onto",{"_index":437,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["open",{"_index":141,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{}}}],["opt",{"_index":627,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["option",{"_index":30,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"changelog.html":{}}}],["options.t",{"_index":64,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["options.ts:10",{"_index":93,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["options.ts:11",{"_index":353,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:12",{"_index":82,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["options.ts:14",{"_index":77,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["options.ts:15",{"_index":354,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:16",{"_index":81,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:18",{"_index":89,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:19",{"_index":348,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:20",{"_index":86,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:21",{"_index":431,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["options.ts:22",{"_index":79,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:23",{"_index":351,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:24",{"_index":94,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:26",{"_index":96,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{}}}],["options.ts:27",{"_index":421,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["options.ts:6",{"_index":398,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["options.ts:8",{"_index":84,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["opton",{"_index":396,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["order",{"_index":416,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["othercompon",{"_index":635,"title":{},"body":{"index.html":{}}}],["othermodul",{"_index":636,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":343,"title":{},"body":{"classes/NgcCookieOptions.html":{},"license.html":{}}}],["out",{"_index":628,"title":{},"body":{"index.html":{},"license.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["overrid",{"_index":723,"title":{},"body":{"index.html":{}}}],["overview",{"_index":800,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":546,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["palett",{"_index":29,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["param",{"_index":219,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["paramet",{"_index":115,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["part",{"_index":606,"title":{},"body":{"index.html":{}}}],["particular",{"_index":401,"title":{},"body":{"classes/NgcLawOptions.html":{},"index.html":{},"license.html":{}}}],["pass",{"_index":418,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["path",{"_index":346,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["peerdepend",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":751,"title":{},"body":{"license.html":{}}}],["permit",{"_index":772,"title":{},"body":{"license.html":{}}}],["person",{"_index":755,"title":{},"body":{"license.html":{}}}],["point",{"_index":588,"title":{},"body":{"index.html":{}}}],["polici",{"_index":72,"title":{},"body":{"classes/NgcContentOptions.html":{},"changelog.html":{},"index.html":{}}}],["popup",{"_index":111,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["popupclos",{"_index":177,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupclosesourc",{"_index":169,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupclosesubscript",{"_index":656,"title":{},"body":{"index.html":{}}}],["popupinst",{"_index":167,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopen",{"_index":176,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopensourc",{"_index":168,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopensubscript",{"_index":655,"title":{},"body":{"index.html":{}}}],["portion",{"_index":777,"title":{},"body":{"license.html":{}}}],["posit",{"_index":814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["possibl",{"_index":813,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prevent",{"_index":678,"title":{},"body":{"index.html":{}}}],["previou",{"_index":739,"title":{},"body":{"index.html":{}}}],["prioriti",{"_index":427,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["privat",{"_index":164,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["properli",{"_index":577,"title":{},"body":{"index.html":{}}}],["properti",{"_index":67,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["provid",{"_index":217,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["publish",{"_index":767,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":784,"title":{},"body":{"license.html":{}}}],["react",{"_index":446,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["read",{"_index":362,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["recommend",{"_index":339,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["ref",{"_index":652,"title":{},"body":{"index.html":{}}}],["refer",{"_index":19,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["regionallaw",{"_index":397,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["relax",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["remain",{"_index":605,"title":{},"body":{"index.html":{}}}],["render",{"_index":14,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["repres",{"_index":52,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["requir",{"_index":563,"title":{},"body":{"index.html":{}}}],["reset",{"_index":803,"title":{},"body":{"overview.html":{}}}],["resourc",{"_index":450,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["restrict",{"_index":761,"title":{},"body":{"license.html":{}}}],["result",{"_index":60,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":107,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["revok",{"_index":181,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["revokechoic",{"_index":182,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["revokechoicesourc",{"_index":172,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["revokechoicesubscript",{"_index":659,"title":{},"body":{"index.html":{}}}],["right",{"_index":764,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["root",{"_index":610,"title":{},"body":{"index.html":{}}}],["rule",{"_index":405,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["rxj",{"_index":126,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["rxjs/subscript",{"_index":646,"title":{},"body":{"index.html":{}}}],["save",{"_index":572,"title":{},"body":{"index.html":{}}}],["scope",{"_index":161,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["script",{"_index":448,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["secur",{"_index":347,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["see",{"_index":621,"title":{},"body":{"index.html":{}}}],["selector",{"_index":647,"title":{},"body":{"index.html":{}}}],["sell",{"_index":771,"title":{},"body":{"license.html":{}}}],["server",{"_index":341,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["servic",{"_index":153,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"injectables/WindowService.html":{},"changelog.html":{}}}],["service/index",{"_index":286,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["servicedefinit",{"_index":419,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["set",{"_index":227,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["setstatu",{"_index":288,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["setstatus(statu",{"_index":139,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["shall",{"_index":775,"title":{},"body":{"license.html":{}}}],["show",{"_index":303,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["showrevok",{"_index":292,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["similar",{"_index":614,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":634,"title":{},"body":{"index.html":{}}}],["slightli",{"_index":608,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":758,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{}}}],["specif",{"_index":404,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["specifi",{"_index":367,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["src/.../common",{"_index":807,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../window.service.t",{"_index":558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/asset",{"_index":698,"title":{},"body":{"index.html":{}}}],["src/cookieconsent.module.t",{"_index":277,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["src/cookieconsent.module.ts:15",{"_index":281,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["src/event/initialize.event.t",{"_index":391,"title":{},"body":{"interfaces/NgcInitializeEvent.html":{}}}],["src/event/no",{"_index":456,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{}}}],["src/event/statu",{"_index":467,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["src/model/common",{"_index":5,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"miscellaneous/typealiases.html":{}}}],["src/model/cont",{"_index":63,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["src/model/cooki",{"_index":338,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["src/model/html",{"_index":378,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["src/model/law",{"_index":395,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["src/model/loc",{"_index":408,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["src/model/palett",{"_index":460,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["src/service/cookieconsent.service.t",{"_index":98,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["src/service/cookieconsent.service.ts:122",{"_index":307,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:132",{"_index":318,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:169",{"_index":313,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:176",{"_index":314,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:18",{"_index":106,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["src/service/cookieconsent.service.ts:183",{"_index":315,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:19",{"_index":114,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["src/service/cookieconsent.service.ts:190",{"_index":308,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:195",{"_index":320,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:200",{"_index":309,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:205",{"_index":310,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:210",{"_index":311,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:215",{"_index":312,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:220",{"_index":319,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:225",{"_index":321,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:230",{"_index":316,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:235",{"_index":317,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:27",{"_index":301,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:28",{"_index":296,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:29",{"_index":290,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:30",{"_index":300,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:31",{"_index":291,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:32",{"_index":293,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:33",{"_index":294,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:34",{"_index":295,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:35",{"_index":299,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:36",{"_index":302,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:37",{"_index":297,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:38",{"_index":298,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["src/service/cookieconsent.service.ts:58",{"_index":323,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:61",{"_index":329,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:64",{"_index":336,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:66",{"_index":322,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:69",{"_index":331,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:70",{"_index":328,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:71",{"_index":325,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:72",{"_index":335,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:73",{"_index":333,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:74",{"_index":326,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:79",{"_index":330,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:83",{"_index":327,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:87",{"_index":324,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:91",{"_index":334,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:95",{"_index":332,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/cookieconsent.service.ts:99",{"_index":306,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["src/service/window.service.t",{"_index":471,"title":{},"body":{"injectables/WindowService.html":{},"miscellaneous/functions.html":{}}}],["src/service/window.service.ts:9",{"_index":475,"title":{},"body":{"injectables/WindowService.html":{}}}],["start",{"_index":481,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["static",{"_index":278,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["statu",{"_index":55,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["statuschang",{"_index":180,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["statuschangesourc",{"_index":171,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["statuschangesubscript",{"_index":658,"title":{},"body":{"index.html":{}}}],["step",{"_index":695,"title":{},"body":{"index.html":{}}}],["straight",{"_index":423,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["stream",{"_index":194,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["string",{"_index":24,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":641,"title":{},"body":{"index.html":{}}}],["style",{"_index":579,"title":{},"body":{"index.html":{}}}],["stylesheet",{"_index":33,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["styleurl",{"_index":650,"title":{},"body":{"index.html":{}}}],["subject",{"_index":124,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"license.html":{}}}],["sublicens",{"_index":769,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":174,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["subscribe(data",{"_index":721,"title":{},"body":{"index.html":{}}}],["subscript",{"_index":645,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":776,"title":{},"body":{"license.html":{}}}],["succe",{"_index":441,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["such",{"_index":582,"title":{},"body":{"index.html":{}}}],["suport",{"_index":223,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["support",{"_index":250,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["sure",{"_index":576,"title":{},"body":{"index.html":{}}}],["system",{"_index":592,"title":{},"body":{"index.html":{}}}],["systemj",{"_index":585,"title":{},"body":{"index.html":{}}}],["tag",{"_index":449,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["target",{"_index":73,"title":{},"body":{"classes/NgcContentOptions.html":{},"changelog.html":{}}}],["tell",{"_index":47,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["templateurl",{"_index":648,"title":{},"body":{"index.html":{}}}],["test",{"_index":568,"title":{},"body":{"index.html":{}}}],["text",{"_index":39,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["theme",{"_index":625,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["this.ccservice.destroy();//remov",{"_index":738,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig",{"_index":666,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().cont",{"_index":722,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.allow",{"_index":730,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.deni",{"_index":732,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.dismiss",{"_index":728,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.head",{"_index":724,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.link",{"_index":734,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.messag",{"_index":726,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.polici",{"_index":736,"title":{},"body":{"index.html":{}}}],["this.ccservice.init(this.ccservice.getconfig",{"_index":740,"title":{},"body":{"index.html":{}}}],["this.ccservice.initialize$.subscrib",{"_index":670,"title":{},"body":{"index.html":{}}}],["this.ccservice.nocookielaw$.subscrib",{"_index":676,"title":{},"body":{"index.html":{}}}],["this.ccservice.popupclose$.subscrib",{"_index":668,"title":{},"body":{"index.html":{}}}],["this.ccservice.popupopen$.subscrib",{"_index":665,"title":{},"body":{"index.html":{}}}],["this.ccservice.revokechoice$.subscrib",{"_index":674,"title":{},"body":{"index.html":{}}}],["this.ccservice.statuschange$.subscrib",{"_index":672,"title":{},"body":{"index.html":{}}}],["this.checkpopupinstantiated('clearstatu",{"_index":255,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('clos",{"_index":259,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('destroy",{"_index":261,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('fadein",{"_index":263,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('fadeout",{"_index":265,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('hasansw",{"_index":271,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('hascons",{"_index":273,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('isopen",{"_index":267,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('open",{"_index":257,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('togglerevokebutton",{"_index":269,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config",{"_index":226,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.oninitialis",{"_index":233,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onnocookielaw",{"_index":240,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onpopupclos",{"_index":231,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onpopupopen",{"_index":229,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onrevokechoic",{"_index":238,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onstatuschang",{"_index":235,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookiecons",{"_index":224,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.hastransit",{"_index":253,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.initialise(this.config",{"_index":245,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.statu",{"_index":248,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.init(config",{"_index":209,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initi",{"_index":199,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializesourc",{"_index":190,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializesource.asobserv",{"_index":200,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializesource.next",{"_index":234,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializesubscript",{"_index":669,"title":{},"body":{"index.html":{}}}],["this.initializesubscription.unsubscrib",{"_index":683,"title":{},"body":{"index.html":{}}}],["this.nocookielaw",{"_index":205,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsourc",{"_index":193,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsource.asobserv",{"_index":206,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsource.next",{"_index":243,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsubscript",{"_index":675,"title":{},"body":{"index.html":{}}}],["this.nocookielawsubscription.unsubscrib",{"_index":686,"title":{},"body":{"index.html":{}}}],["this.popupclos",{"_index":197,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesourc",{"_index":189,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesource.asobserv",{"_index":198,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesource.next",{"_index":232,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesubscript",{"_index":667,"title":{},"body":{"index.html":{}}}],["this.popupclosesubscription.unsubscrib",{"_index":682,"title":{},"body":{"index.html":{}}}],["this.popupinst",{"_index":211,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.clearstatu",{"_index":256,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.close(showrevok",{"_index":260,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.destroy",{"_index":262,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.fadein",{"_index":264,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.fadeout",{"_index":266,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.hasansw",{"_index":272,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.hascons",{"_index":274,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.isopen",{"_index":268,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.open",{"_index":258,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.togglerevokebutton(show",{"_index":270,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopen",{"_index":195,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensourc",{"_index":187,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensource.asobserv",{"_index":196,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensource.next",{"_index":230,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensubscript",{"_index":664,"title":{},"body":{"index.html":{}}}],["this.popupopensubscription.unsubscrib",{"_index":681,"title":{},"body":{"index.html":{}}}],["this.revokechoic",{"_index":203,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesourc",{"_index":192,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesource.asobserv",{"_index":204,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesource.next",{"_index":239,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesubscript",{"_index":673,"title":{},"body":{"index.html":{}}}],["this.revokechoicesubscription.unsubscrib",{"_index":685,"title":{},"body":{"index.html":{}}}],["this.statuschang",{"_index":201,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesourc",{"_index":191,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesource.asobserv",{"_index":202,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesource.next",{"_index":237,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesubscript",{"_index":671,"title":{},"body":{"index.html":{}}}],["this.statuschangesubscription.unsubscrib",{"_index":684,"title":{},"body":{"index.html":{}}}],["this.translateservic",{"_index":713,"title":{},"body":{"index.html":{}}}],["this.translateservice.addlangs(['en",{"_index":706,"title":{},"body":{"index.html":{}}}],["this.translateservice.getbrowserlang",{"_index":710,"title":{},"body":{"index.html":{}}}],["this.translateservice.setdefaultlang('en",{"_index":708,"title":{},"body":{"index.html":{}}}],["this.translateservice.use(browserlang.match(/en|fr",{"_index":711,"title":{},"body":{"index.html":{}}}],["this.window",{"_index":207,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.window.cookiecons",{"_index":225,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["throw",{"_index":213,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["timeout",{"_index":420,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["tine",{"_index":747,"title":{},"body":{"index.html":{},"license.html":{}}}],["togglerevokebutton",{"_index":289,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["togglerevokebutton(show",{"_index":147,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["tool",{"_index":48,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["top",{"_index":611,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["tort",{"_index":794,"title":{},"body":{"license.html":{}}}],["track",{"_index":357,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["translat",{"_index":251,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["translate/cor",{"_index":704,"title":{},"body":{"index.html":{}}}],["translateservic",{"_index":703,"title":{},"body":{"index.html":{}}}],["translateservice:translateservic",{"_index":705,"title":{},"body":{"index.html":{}}}],["transmit",{"_index":374,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["transpar",{"_index":462,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["tri",{"_index":454,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["true",{"_index":371,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["two",{"_index":46,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{}}}],["type",{"_index":74,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializeEvent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":804,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":479,"title":{},"body":{"injectables/WindowService.html":{}}}],["types.t",{"_index":808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typic",{"_index":151,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["typo",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":689,"title":{},"body":{"index.html":{}}}],["umd",{"_index":589,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":480,"title":{},"body":{"injectables/WindowService.html":{}}}],["under",{"_index":749,"title":{},"body":{"index.html":{}}}],["univers",{"_index":222,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["unsubscrib",{"_index":653,"title":{},"body":{"index.html":{}}}],["up",{"_index":613,"title":{},"body":{"index.html":{}}}],["updat",{"_index":489,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["upon",{"_index":742,"title":{},"body":{"index.html":{}}}],["url",{"_index":360,"title":{},"body":{"classes/NgcCookieOptions.html":{},"changelog.html":{}}}],["us",{"_index":17,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":637,"title":{},"body":{"index.html":{}}}],["user",{"_index":358,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["usevalu",{"_index":287,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["v1.1.0",{"_index":564,"title":{},"body":{"index.html":{}}}],["v3.1.0",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["v6",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["v8",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":76,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["version",{"_index":506,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":375,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["view",{"_index":560,"title":{},"body":{"index.html":{}}}],["void",{"_index":113,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["want",{"_index":432,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["warranti",{"_index":778,"title":{},"body":{"license.html":{}}}],["websit",{"_index":83,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["whether",{"_index":792,"title":{},"body":{"license.html":{}}}],["window",{"_index":66,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["window.servic",{"_index":137,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["windowservic",{"_index":136,"title":{"injectables/WindowService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["windowservice.nativewindow",{"_index":208,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["without",{"_index":439,"title":{},"body":{"classes/NgcLocationOptions.html":{},"license.html":{}}}],["word",{"_index":44,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["work",{"_index":344,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["wrong",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["x274c",{"_index":78,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["ye",{"_index":119,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["your.domain.com",{"_index":620,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":802,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/NgcCompliance.html":{"url":"interfaces/NgcCompliance.html","title":"interface - NgcCompliance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcCompliance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/common-interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Compliance.\nEach compliance level contains the HTML needed to render that level of compliance.\nThe 'cc-compliance' class is used in the CSS to reference the group of buttons.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in src/model/common-interfaces.ts:7\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcContentOptions.html":{"url":"classes/NgcContentOptions.html","title":"class - NgcContentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcContentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/content-options.ts\n        \n\n            \n                Description\n            \n            \n                Content Options.\nText strings used for cookie consent window elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allow\n                            \n                            \n                                    Optional\n                                close\n                            \n                            \n                                    Optional\n                                deny\n                            \n                            \n                                    Optional\n                                dismiss\n                            \n                            \n                                    Optional\n                                header\n                            \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                link\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                policy\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        allow:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Allow cookies'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            close\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        close:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '&#x274c;'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deny:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Decline'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            dismiss\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dismiss:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Got it!'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            header\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        header:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Cookies used on the website!'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            href\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        href:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://cookiesandyou.com'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            link\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        link:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Learn more'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            message\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        message:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'This website uses cookies to ensure you get the best experience on our website.'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            policy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        policy:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Cookie Policy'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            target\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        target:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '_blank'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/content-options.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcContentOptions {\n\n  header ? = 'Cookies used on the website!';\n\n  message ? = 'This website uses cookies to ensure you get the best experience on our website.';\n\n  dismiss ? = 'Got it!';\n\n  allow ? = 'Allow cookies';\n\n  deny ? = 'Decline';\n\n  link ? = 'Learn more';\n\n  href ? = 'https://cookiesandyou.com';\n\n  close ? = '&#x274c;';\n\n  policy ? = 'Cookie Policy';\n\n  target ? = '_blank';\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsent.html":{"url":"interfaces/NgcCookieConsent.html","title":"interface - NgcCookieConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcCookieConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/cookieconsent.service.ts\n        \n\n            \n                Description\n            \n            \n                Basic interface to represent cookieconsent object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hasTransition\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getStatus\n                                \n                                \n                                    initialise\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStatus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     NgcCookieConsentStatus\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initialise\n                            \n                            \n                        \n                    \n                \n                \n                    \ninitialise(config: NgcCookieConsentConfig, callback?: (popup?: NgcCookieConsentPopup) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    NgcCookieConsentConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasTransition\n                                    \n                                \n                                \n                                    \n                                        hasTransition:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:     NgcCookieConsentStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NgcCookieConsentStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializeSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent initializes.\n   */\n  initialize$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializeSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initialize$ = this.initializeSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializeSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, (popup: NgcCookieConsentPopup) => this.popupInstance = popup);\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgcCookieConsentModule.html":{"url":"modules/NgcCookieConsentModule.html","title":"module - NgcCookieConsentModule","body":"\n                   \n\n\n\n\n    Modules\n    NgcCookieConsentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cookieconsent.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Main module of the library\n\n        \n\n\n        \n            \n            \n        \n\n        \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            forRoot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forRoot(config: NgcCookieConsentConfig)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/cookieconsent.module.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    NgcCookieConsentConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ModuleWithProviders\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgcCookieConsentConfig, NgcCookieConsentService } from './service/index';\n\n/**\n * Main module of the library\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgcCookieConsentModule {\n\n  static forRoot(config: NgcCookieConsentConfig): ModuleWithProviders {\n    return {\n      ngModule: NgcCookieConsentModule,\n      providers: [WindowService, { provide: NgcCookieConsentConfig, useValue: config }, NgcCookieConsentService]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsentPopup.html":{"url":"interfaces/NgcCookieConsentPopup.html","title":"interface - NgcCookieConsentPopup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcCookieConsentPopup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/cookieconsent.service.ts\n        \n\n            \n                Description\n            \n            \n                Basic interface to represent cookieconsent.Popup object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    clearStatus\n                                \n                                \n                                    close\n                                \n                                \n                                    destroy\n                                \n                                \n                                    fadeIn\n                                \n                                \n                                    fadeOut\n                                \n                                \n                                    getStatus\n                                \n                                \n                                    hasAnswered\n                                \n                                \n                                    hasConsented\n                                \n                                \n                                    isOpen\n                                \n                                \n                                    open\n                                \n                                \n                                    setStatus\n                                \n                                \n                                    toggleRevokeButton\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clearStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \nclearStatus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            close\n                            \n                            \n                        \n                    \n                \n                \n                    \nclose(showRevoke: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:31\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showRevoke\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     NgcCookieConsentPopup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            destroy\n                            \n                            \n                        \n                    \n                \n                \n                    \ndestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fadeIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nfadeIn()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fadeOut\n                            \n                            \n                        \n                    \n                \n                \n                    \nfadeOut()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:34\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStatus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     NgcCookieConsentStatus\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasAnswered\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasAnswered()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasConsented\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasConsented()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isOpen\n                            \n                            \n                        \n                    \n                \n                \n                    \nisOpen()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            open\n                            \n                            \n                        \n                    \n                \n                \n                    \nopen()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     NgcCookieConsentPopup\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetStatus(status: NgcCookieConsentStatus)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:27\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                        \n                                                                    NgcCookieConsentStatus\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleRevokeButton\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleRevokeButton(show: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        show\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializeSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent initializes.\n   */\n  initialize$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializeSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initialize$ = this.initializeSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializeSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, (popup: NgcCookieConsentPopup) => this.popupInstance = popup);\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgcCookieConsentService.html":{"url":"injectables/NgcCookieConsentService.html","title":"injectable - NgcCookieConsentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NgcCookieConsentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/cookieconsent.service.ts\n        \n\n            \n                Description\n            \n            \n                Service to interact with Cookie Consent API.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                cookieconsent\n                            \n                            \n                                initialize$\n                            \n                            \n                                    Private\n                                initializeSource\n                            \n                            \n                                noCookieLaw$\n                            \n                            \n                                    Private\n                                noCookieLawSource\n                            \n                            \n                                popupClose$\n                            \n                            \n                                    Private\n                                popupCloseSource\n                            \n                            \n                                    Private\n                                popupInstance\n                            \n                            \n                                popupOpen$\n                            \n                            \n                                    Private\n                                popupOpenSource\n                            \n                            \n                                revokeChoice$\n                            \n                            \n                                    Private\n                                revokeChoiceSource\n                            \n                            \n                                statusChange$\n                            \n                            \n                                    Private\n                                statusChangeSource\n                            \n                            \n                                    Private\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkPopupInstantiated\n                            \n                            \n                                clearStatus\n                            \n                            \n                                close\n                            \n                            \n                                destroy\n                            \n                            \n                                fadeIn\n                            \n                            \n                                fadeOut\n                            \n                            \n                                getConfig\n                            \n                            \n                                getStatus\n                            \n                            \n                                getTransition\n                            \n                            \n                                hasAnswered\n                            \n                            \n                                hasConsented\n                            \n                            \n                                init\n                            \n                            \n                                isOpen\n                            \n                            \n                                open\n                            \n                            \n                                toggleRevokeButton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(windowService: WindowService, config: NgcCookieConsentConfig)\n                    \n                \n                        \n                            \n                                Defined in src/service/cookieconsent.service.ts:99\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        windowService\n                                                  \n                                                        \n                                                                    WindowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    NgcCookieConsentConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkPopupInstantiated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkPopupInstantiated(method: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:122\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        method\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clearStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \nclearStatus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:190\n                            \n                        \n\n\n                \n                    \n                            Clears the current cookie status.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            close\n                            \n                            \n                        \n                    \n                \n                \n                    \nclose(showRevoke: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:200\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showRevoke\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     NgcCookieConsentPopup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            destroy\n                            \n                            \n                        \n                    \n                \n                \n                    \ndestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:205\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fadeIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nfadeIn()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:210\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fadeOut\n                            \n                            \n                        \n                    \n                \n                \n                    \nfadeOut()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:215\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConfig\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetConfig()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:169\n                            \n                        \n\n\n                \n                    \n                            Gets the current configuration  used by the Cookie Consent.\n\n\n                            \n                                Returns :     NgcCookieConsentConfig\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStatus\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStatus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:176\n                            \n                        \n\n\n                \n                    \n                            Gets the current cookie status.\n\n\n                            \n                                Returns :     NgcCookieConsentStatus\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTransition\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTransition()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:183\n                            \n                        \n\n\n                \n                    \n                            Gets the current browser support for translations\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasAnswered\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasAnswered()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:230\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasConsented\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasConsented()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:235\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit(config: NgcCookieConsentConfig)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:132\n                            \n                        \n\n\n                \n                    \n                            Initializes Cookie Consent with the provided configuration.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                        \n                                                                    NgcCookieConsentConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the configuration object\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isOpen\n                            \n                            \n                        \n                    \n                \n                \n                    \nisOpen()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:220\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            open\n                            \n                            \n                        \n                    \n                \n                \n                    \nopen()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:195\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     NgcCookieConsentPopup\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleRevokeButton\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleRevokeButton(show: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:225\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        show\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     NgcCookieConsentConfig\n\n                    \n                \n                    \n                        \n                            Type :     NgcCookieConsentConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cookieconsent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cookieconsent:     NgcCookieConsent\n\n                    \n                \n                    \n                        \n                            Type :     NgcCookieConsent\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initialize$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        initialize$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:87\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when Cookie Consent initializes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initializeSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        initializeSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            noCookieLaw$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        noCookieLaw$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:99\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when no Cookie Law is applicable.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            noCookieLawSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        noCookieLawSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popupClose$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popupClose$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:83\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when Cookie Consent popup closes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            popupCloseSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popupCloseSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            popupInstance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popupInstance:     NgcCookieConsentPopup\n\n                    \n                \n                    \n                        \n                            Type :     NgcCookieConsentPopup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popupOpen$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popupOpen$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:79\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when Cookie Consent popup opens.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            popupOpenSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popupOpenSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            revokeChoice$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        revokeChoice$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:95\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when Cookie is revoked.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            revokeChoiceSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        revokeChoiceSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusChange$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        statusChange$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:91\n                            \n                        \n\n                \n                    \n                        Observable to subscribe to and get notified when Cookie Consent status changes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            statusChangeSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        statusChangeSource:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            window\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        window:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/service/cookieconsent.service.ts:64\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializeSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent initializes.\n   */\n  initialize$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializeSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initialize$ = this.initializeSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializeSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, (popup: NgcCookieConsentPopup) => this.popupInstance = popup);\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsentStatus.html":{"url":"interfaces/NgcCookieConsentStatus.html","title":"interface - NgcCookieConsentStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcCookieConsentStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/common-interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the cookie consent status.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        allow\n                                \n                                \n                                            Optional\n                                        deny\n                                \n                                \n                                            Optional\n                                        dismiss\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allow\n                                    \n                                \n                                \n                                    \n                                        allow:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deny\n                                    \n                                \n                                \n                                    \n                                        deny:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dismiss\n                                    \n                                \n                                \n                                    \n                                        dismiss:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcCookieOptions.html":{"url":"classes/NgcCookieOptions.html","title":"class - NgcCookieOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcCookieOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/cookie-options.ts\n        \n\n            \n                Description\n            \n            \n                Cookie Options.\nIt is recommended to set these values to correspond with your server.\nYou MUST set the ‘domain’ option, otherwise your cookies may not work.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                domain\n                            \n                            \n                                    Optional\n                                expiryDays\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                path\n                            \n                            \n                                    Optional\n                                secure\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            domain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        domain:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/model/cookie-options.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            expiryDays\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        expiryDays:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 365\n                        \n                    \n                        \n                            \n                                    Defined in src/model/cookie-options.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cookieconsent_status'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/cookie-options.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            path\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        path:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '/'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/cookie-options.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            secure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        secure:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/model/cookie-options.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcCookieOptions {\n\n  // Name of the cookie that keeps track of users choice\n  // Default: 'cookieconsent_status'\n  name ? = 'cookieconsent_status';\n\n  // URL path that the cookie 'name' belongs to. The cookie can only be read at this location\n  // Default: '/'\n  path ? = '/';\n\n  // The domain that the cookie 'name' belongs to. The cookie can only be read on this domain. Guide to cookie domains\n  // Default: \n  domain: string;\n\n  // The cookies expire date, specified in days (specify -1 for no expiry)\n  // Default: 365\n  expiryDays ? = 365;\n\n  // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.\n  secure ? = false;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcHTMLElements.html":{"url":"classes/NgcHTMLElements.html","title":"class - NgcHTMLElements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcHTMLElements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/html-elements.ts\n        \n\n            \n                Description\n            \n            \n                HTML Elements\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allow\n                            \n                            \n                                    Optional\n                                close\n                            \n                            \n                                    Optional\n                                compliance\n                            \n                            \n                                    Optional\n                                deny\n                            \n                            \n                                    Optional\n                                dismiss\n                            \n                            \n                                    Optional\n                                header\n                            \n                            \n                                    Optional\n                                link\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                messagelink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        allow:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{allow}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            close\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        close:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{close}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            compliance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        compliance:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deny:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{deny}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            dismiss\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dismiss:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{dismiss}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            header\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        header:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{header}}&nbsp;'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            link\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        link:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{link}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            message\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        message:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{message}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            messagelink\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        messagelink:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '{{message}} {{link}}'\n                        \n                    \n                        \n                            \n                                    Defined in src/model/html-elements.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcHTMLElements {\n\n  header ? = '{{header}}&nbsp;';\n\n  message ? = '{{message}}';\n\n  messagelink ? = '{{message}} {{link}}';\n\n  dismiss ? = '{{dismiss}}';\n\n  allow ? = '{{allow}}';\n\n  deny ? = '{{deny}}';\n\n  link ? = '{{link}}';\n\n  close ? = '{{close}}';\n\n  compliance ?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcHasCookieConsent.html":{"url":"interfaces/NgcHasCookieConsent.html","title":"interface - NgcHasCookieConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcHasCookieConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/cookieconsent.service.ts\n        \n\n            \n                Description\n            \n            \n                Marker interface to indicate that an object (typically window) has cookieconsent property.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cookieconsent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookieconsent\n                                    \n                                \n                                \n                                    \n                                        cookieconsent:     NgcCookieConsent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NgcCookieConsent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializeSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent initializes.\n   */\n  initialize$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializeSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initialize$ = this.initializeSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializeSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, (popup: NgcCookieConsentPopup) => this.popupInstance = popup);\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcInitializeEvent.html":{"url":"interfaces/NgcInitializeEvent.html","title":"interface - NgcInitializeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcInitializeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/initialize.event.ts\n        \n\n            \n                Description\n            \n            \n                Event fired when Cookie Consent initializes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:     \"allow\" | \"deny\" | \"dismiss\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"allow\" | \"deny\" | \"dismiss\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The status of cookie consent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcInitializeEvent {\n  /**\n   * The status of cookie consent\n   */\n  status: 'allow' | 'deny' | 'dismiss';\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcLawOptions.html":{"url":"classes/NgcLawOptions.html","title":"class - NgcLawOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcLawOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/law-options.ts\n        \n\n            \n                Description\n            \n            \n                Law Optons.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countryCode\n                            \n                            \n                                regionalLaw\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countryCode\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        countryCode:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/model/law-options.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            regionalLaw\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        regionalLaw:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/model/law-options.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcLawOptions {\n  // Rather than getting the country code from the location services, you can hard code a particular country into the tool.\n  countryCode: string;\n\n  // If false, then we only enable the popup if the country has the cookie law. We ignore all other country specific rules.\n  // Default: true\n  regionalLaw = true;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcLayouts.html":{"url":"interfaces/NgcLayouts.html","title":"interface - NgcLayouts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcLayouts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/common-interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Layouts\nJust like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\nThe word between these two markers tell the tool what each element is called.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in src/model/common-interfaces.ts:30\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcLocationOptions.html":{"url":"classes/NgcLocationOptions.html","title":"class - NgcLocationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcLocationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/location-options.ts\n        \n\n            \n                Description\n            \n            \n                Location Options\nThe location services are disabled by default. You are encouraged to implement a handler to your own service, rather than using the free ones provided.\nTo enable the basic location services, set 'location' to 'true'. To add you own services or configure the order or execution, pass an object with configuration properties.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                serviceDefinitions\n                            \n                            \n                                services\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serviceDefinitions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serviceDefinitions:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/model/location-options.ts:27\n                            \n                        \n\n                \n                    \n                        This can be used to define new services via a key, but new services they can also go straight into the 'services' array in an ad-hoc fashion.\n  It is recommended that you define services in 'serviceDefinitions' and use 'services' to configure priority between services\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            services\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        services:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['freegeoip', 'ipinfo', 'maxmind']\n                        \n                    \n                        \n                            \n                                    Defined in src/model/location-options.ts:21\n                            \n                        \n\n                \n                    \n                        This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\nIf all services fail, the popup is opened without modification.\nIf a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\nDefault: ['freegeoip', 'ipinfo', 'maxmind']\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timeout\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timeout:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 5000\n                        \n                    \n                        \n                            \n                                    Defined in src/model/location-options.ts:14\n                            \n                        \n\n                \n                    \n                        We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\nDefault: 5000 (milliseconds)\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcLocationOptions {\n\n  /**\n   * We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\n   * Default: 5000 (milliseconds)\n   */\n  timeout = 5000;\n  /**\n   * This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\n   * If all services fail, the popup is opened without modification.\n   * If a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\n   * Default: ['freegeoip', 'ipinfo', 'maxmind']\n   */\n  services = ['freegeoip', 'ipinfo', 'maxmind'];\n\n  /**\n   * This can be used to define new services via a key, but new services they can also go straight into the 'services' array in an ad-hoc fashion.\n   *  It is recommended that you define services in 'serviceDefinitions' and use 'services' to configure priority between services\n   */\n  serviceDefinitions: any;\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcNoCookieLawEvent.html":{"url":"interfaces/NgcNoCookieLawEvent.html","title":"interface - NgcNoCookieLawEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcNoCookieLawEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/no-cookie-law.event.ts\n        \n\n            \n                Description\n            \n            \n                Event fired when there is no cookie law for a given country.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        country\n                                \n                                \n                                        countryCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The country\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        countryCode\n                                    \n                                \n                                \n                                    \n                                        countryCode:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The country code\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcNoCookieLawEvent {\n    /**\n     * The country code\n     */\n    countryCode: string;\n    /**\n     * The country\n     */\n    country: string;\n  }\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcPalette.html":{"url":"interfaces/NgcPalette.html","title":"interface - NgcPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcPalette\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/common-interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Palette Options\nColours can be defined in additional stylesheets or using attributes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        background\n                                \n                                \n                                            Optional\n                                        border\n                                \n                                \n                                            Optional\n                                        link\n                                \n                                \n                                            Optional\n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        background\n                                    \n                                \n                                \n                                    \n                                        background:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        border\n                                    \n                                \n                                \n                                    \n                                        border:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcPaletteOptions.html":{"url":"classes/NgcPaletteOptions.html","title":"class - NgcPaletteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcPaletteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/palette-options.ts\n        \n\n            \n                Description\n            \n            \n                Palette Options\nColours can be defined in additional stylesheets or using attributes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                button\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Optional\n                                popup\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        button:     NgcPalette\n\n                    \n                \n                    \n                        \n                            Type :     NgcPalette\n\n                        \n                    \n                    \n                        \n                            Default value : { background: 'transparent', border: '#f8e71c', text: '#f8e71c' }\n                        \n                    \n                        \n                            \n                                    Defined in src/model/palette-options.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            highlight\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        highlight:     NgcPalette\n\n                    \n                \n                    \n                        \n                            Type :     NgcPalette\n\n                        \n                    \n                    \n                        \n                            Default value : { background: '#f8e71c', border: '#f8e71c', text: '#000000' }\n                        \n                    \n                        \n                            \n                                    Defined in src/model/palette-options.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            popup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        popup:     NgcPalette\n\n                    \n                \n                    \n                        \n                            Type :     NgcPalette\n\n                        \n                    \n                    \n                        \n                            Default value : { background: '#000000', text: '#fff', link: '#fff' }\n                        \n                    \n                        \n                            \n                                    Defined in src/model/palette-options.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NgcPalette } from './common-interfaces';\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\nexport class NgcPaletteOptions {\n  popup?: NgcPalette = { background: '#000000', text: '#fff', link: '#fff' };\n\n  button?: NgcPalette = { background: 'transparent', border: '#f8e71c', text: '#f8e71c' };\n\n  highlight?: NgcPalette = { background: '#f8e71c', border: '#f8e71c', text: '#000000' };\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcStatusChangeEvent.html":{"url":"interfaces/NgcStatusChangeEvent.html","title":"interface - NgcStatusChangeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgcStatusChangeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/status-change.event.ts\n        \n\n            \n                Description\n            \n            \n                Event fired when cookie status changes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chosenBefore\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chosenBefore\n                                    \n                                \n                                \n                                    \n                                        chosenBefore:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Flag indicating if the new status was chosen before\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:     \"allow\" | \"deny\" | \"dismiss\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"allow\" | \"deny\" | \"dismiss\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The new status of cookie consent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcStatusChangeEvent {\n  /**\n   * The new status of cookie consent\n   */\n  status: 'allow' | 'deny' | 'dismiss';\n  /**\n   * Flag indicating if the new status was chosen before\n   */\n  chosenBefore: boolean;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WindowService.html":{"url":"injectables/WindowService.html","title":"injectable - WindowService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WindowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/window.service.ts\n        \n\n            \n                Description\n            \n            \n                Service to interact with the window object.\n\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeWindow\n                    \n                \n\n                \n                    \n                        getnativeWindow()\n                    \n                \n                            \n                                \n                                    Defined in src/service/window.service.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n@Injectable()\nexport class WindowService {\n\n  get nativeWindow(): any {\n    return _window();\n  }\n}\n\nfunction _window(): any {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n\n2.1.0 (2018-10-25)\nFeatures\n\ncore: update to cookieconsent v3.1.0 and its features (d674b93)\noptions: add policy and target options to NgcContentOptions (a0849f2), closes #23\n\n\n2.0.0 (2018-07-19)\nFeatures\n\nng6: add support for angular 6 (2ab9341), closes #17 #18\nonNoCookieLaw: add support for onNoCookieLaw callback (2d960c8)\n\nBREAKING CHANGES\n\nng6: - Minimum version of Angular is now v6+\nMinimum version of Node is v8+\n\n\n1.1.1 (2018-07-18)\nBug Fixes\n\ninitialize$: callback was never called due to typo (onInitialise) (6cd260f), closes #19\n\n\n1.1.0 (2018-07-03)\nBug Fixes\n\ndemo: fix wrong assets url on deployed demo app (fedcbd9)\n\nFeatures\n\nclose: add close method to allow fully closing the 'Coookie Policy' bar (02ada28), closes #15\ndemo: add support for translated cookie consent messages + update docs (e1bf9bf), closes #14\n\n\n1.0.1 (2017-11-22)\nFeatures\n\ncore: make cookie.domainoption mandatory in configuration service and update doc (9835145)\ndemo: update demo app to Angular CLI 1.4.7 (37371b6)\npackaging: relax peerDependencies versions (02496e8), closes #8\n\n\n1.0.0 (2017-09-07)\nFeatures\n\nall: initial commit (5f8a340)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/core : 6.0.0\n        \n            @angular/common : 6.0.0\n        \n            cookieconsent : 3.1.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            _window   (src/.../window.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/service/window.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            _window\n                            \n                            \n                        \n                    \n                \n                \n                    \n_window()\n                    \n                \n\n\n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nngx-cookieconsent - Cookie Consent module for Angular.\n\n\n\n\n\n\nDemo\nView the module in action at https://tinesoft.github.io/ngx-cookieconsent\nDependencies\n\nAngular (requires Angular 6+, v1.1.0 is the latest version for Angular \nCookie Consent (requires Cookie Consent 3 or higher, tested with 3.1.0)\n\nInstallation\nInstall above dependencies via npm. In particular for Cookie Consent:\nnpm install --save cookieconsentNow install ngx-cookieconsent via:\nnpm install --save ngx-cookieconsent\nAngular-CLI\n\nNote: If you are using angular-cli to build your app, make sure that cookieconsent is properly listed as a global library, and as global style.\n\nTo do so, edit your angular-cli.json as such:\n      \"scripts\": [\n        \"../node_modules/cookieconsent/build/cookieconsent.min.js\"\n      ],\n\n      \"styles\": [\n        \"../node_modules/cookieconsent/build/cookieconsent.min.css\"\n      ],\nSystemJS\n\nNote:If you are using SystemJS, you should adjust your configuration to point to the UMD bundle.\nIn your systemjs config file, map needs to tell the System loader where to look for ngx-cookieconsent:\nmap: {\n  'ngx-cookieconsent': 'node_modules/ngx-cookieconsent/bundles/ngx-cookieconsent.umd.js',\n}In your systemjs config file, meta needs to tell the System loader how to load cookieconsent:\n    meta: {\n    './node_modules/cookieconsent/build/cookieconsent.min.js': {\n            format: 'amd'\n        }\n    }In your index.html file, add script and link tags to load  cookieconsent globally:\n    \n    \n    \n    \n    \n\nOnce installed you need to import the main module:\nimport {NgcCookieConsentModule} from 'ngx-cookieconsent';The only remaining part is to list the imported module in your application module. The exact method will be slightly\ndifferent for the root (top-level) module for which you should end up with the code similar to (notice NgcCookieConsentModule.forRoot()):\nimport {NgcCookieConsentModule, NgcCookieConsentConfig} from 'ngx-cookieconsent';\n\nconst cookieConfig:NgcCookieConsentConfig = {\n  cookie: {\n    domain: 'localhost' // or 'your.domain.com' // it is mandatory to set a domain, for cookies to work properly (see https://goo.gl/S2Hy2A)\n  },\n  palette: {\n    popup: {\n      background: '#000'\n    },\n    button: {\n      background: '#f1d600'\n    }\n  },\n  theme: 'edgeless',\n  type: 'opt-out'\n};\n\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [NgcCookieConsentModule.forRoot(cookieConfig), ...],  \n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}Other modules in your application can simply import NgcCookieConsentModule:\nimport {NgcCookieConsentModule} from 'ngx-cookieconsent';\n\n@NgModule({\n  declarations: [OtherComponent, ...],\n  imports: [NgcCookieConsentModule, ...], \n})\nexport class OtherModule {\n}Usage\nOnce the module is imported, you can use the NgcCookieContentService in your component (i.e. AppComponent) to subscribe to main events fired by Cookie Consent and do stuff like disabling cookies or other.\nHere is how it works:\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgcCookieConsentService } from 'ngx-cookieconsent';\nimport { Subscription }   from 'rxjs/Subscription';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n  //keep refs to subscriptions to be able to unsubscribe later\n  private popupOpenSubscription: Subscription;\n  private popupCloseSubscription: Subscription;\n  private initializeSubscription: Subscription;\n  private statusChangeSubscription: Subscription;\n  private revokeChoiceSubscription: Subscription;\n  private noCookieLawSubscription: Subscription;\n\n  constructor(private ccService: NgcCookieConsentService){}\n\n  ngOnInit() {\n    // subscribe to cookieconsent observables to react to main events\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.initializeSubscription = this.ccService.initialize$.subscribe(\n      (event: NgcInitializeEvent) => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(\n      (event: NgcStatusChangeEvent) => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n      this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(\n      (event: NgcNoCookieLawEvent) => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n  }\n\n  ngOnDestroy() {\n    // unsubscribe to cookieconsent observables to prevent memory leaks\n    this.popupOpenSubscription.unsubscribe();\n    this.popupCloseSubscription.unsubscribe();\n    this.initializeSubscription.unsubscribe();\n    this.statusChangeSubscription.unsubscribe();\n    this.revokeChoiceSubscription.unsubscribe();\n    this.noCookieLawSubscription.unsubscribe();\n  }\n}\nSee Cookie Consent Documentation to see more about how to customize the UI or interact with user interactions.\nI18n Support\nMessages displayed in the Cookie Consent Bar can easily be translated, using libraries like ngx-translate.\nBasically this involved the following steps (using ngx-translate + Anglar CLI):\n\nInstall and configure ngx-translate\n\nProvide the translation JSON files in src/assets/, for e.g: en.json, fr.json, ...\n\n\n{\n    \"cookie\": {\n        \"header\": \"Cookies used on the website!\",\n        \"message\": \"This website uses cookies to ensure you get the best experience on our website.\",\n        \"dismiss\": \"Got it!\",\n        \"allow\": \"Allow cookies\",\n        \"deny\": \"Decline\",\n        \"link\": \"Learn more\",\n        \"policy\": \"Cookie Policy\"\n    }\n}\nNote: see content-options.ts for complete list of messages that can be translated.\n\n\nConfigure your main component AppComponent\n\nimport { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(private ccService: NgcCookieConsentService, private translateService:TranslateService) {\n  }\n\n  ngOnInit() {\n    // Support for translated cookies messages\n    this.translateService.addLangs(['en', 'fr']);\n    this.translateService.setDefaultLang('en');\n\n    const browserLang = this.translateService.getBrowserLang();\n    this.translateService.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n\n    this.translateService//\n      .get(['cookie.header', 'cookie.message', 'cookie.dismiss', 'cookie.allow', 'cookie.deny', 'cookie.link', 'cookie.policy'])\n      .subscribe(data => {\n\n        this.ccService.getConfig().content = this.ccService.getConfig().content || {} ;\n        // Override default messages with the translated ones\n        this.ccService.getConfig().content.header = data['cookie.header'];\n        this.ccService.getConfig().content.message = data['cookie.message'];\n        this.ccService.getConfig().content.dismiss = data['cookie.dismiss'];\n        this.ccService.getConfig().content.allow = data['cookie.allow'];\n        this.ccService.getConfig().content.deny = data['cookie.deny'];\n        this.ccService.getConfig().content.link = data['cookie.link'];\n        this.ccService.getConfig().content.policy = data['cookie.policy'];\n\n        this.ccService.destroy();//remove previous cookie bar (with default messages)\n        this.ccService.init(this.ccService.getConfig()); // update config with translated messages\n      });\n  }Credits\nngx-cookieconsent is built upon Cookie Consent, created by Insites\nLicense\nCopyright (c) 2018 Tine Kondo. Licensed under the MIT License (MIT)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Tine Kondo\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgcCookieConsentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgcCookieCompliance   (src/.../common-types.ts)\n                        \n                        \n                            NgcCookieLayout   (src/.../common-types.ts)\n                        \n                        \n                            NgcCookiePosition   (src/.../common-types.ts)\n                        \n                        \n                            NgcCookieTheme   (src/.../common-types.ts)\n                        \n                        \n                            NgcCookieType   (src/.../common-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/model/common-types.ts\n    \n        \n            \n                \n                    \n                        \n                        NgcCookieCompliance\n                    \n                \n                    \n                        \n                            Type for possible Cookie Bar compliances\n\n                        \n                    \n                \n                    \n                        NgcCookieCompliance:     \"info\" | \"opt-in\" | \"opt-out\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NgcCookieLayout\n                    \n                \n                    \n                        \n                            Type for possible Cookie Bar layouts\n\n                        \n                    \n                \n                    \n                        NgcCookieLayout:     \"basic\" | \"basic-close\" | \"basic-header\" | string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NgcCookiePosition\n                    \n                \n                    \n                        \n                            Type for possible Cookie Bar positions\n\n                        \n                    \n                \n                    \n                        NgcCookiePosition:     \"top\" | \"bottom\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NgcCookieTheme\n                    \n                \n                    \n                        \n                            Type for possible Cookie Bar themes\n\n                        \n                    \n                \n                    \n                        NgcCookieTheme:     \"block\" | \"edgeless\" | \"classic\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        NgcCookieType\n                    \n                \n                    \n                        \n                            Type for possible Cookie Bar types\n\n                        \n                    \n                \n                    \n                        NgcCookieType:     \"info\" | \"opt-in\" | \"opt-out\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
